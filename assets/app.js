angular.module("winston",["ui.router"]),angular.module("winston").service("apiSVC",["$http",function(t){this.addNew=function(a){return t.post("/api/stats/add",a)},this.remove=function(a){return t.post("/api/stats/remove",a)},this.load=function(){return t.get("/api/stats")}}]),angular.module("winston").controller("mainCTRL",["$scope","apiSVC","preloadObj",function(t,a,e){t._showInput=!1;var s=function(){return[{key:"week",val:null},{key:"date",val:null},{key:"g",val:null},{key:"gs",val:null},{key:"pass_comp",val:null},{key:"pass_att",val:null},{key:"pass_pct",val:null},{key:"pass_yds",val:null},{key:"pass_avg",val:null},{key:"pass_td",val:null},{key:"pass_int",val:null},{key:"pass_sck",val:null},{key:"pass_scky",val:null},{key:"pass_rate",val:null},{key:"rush_att",val:null},{key:"rush_yds",val:null},{key:"rush_avg",val:null},{key:"rush_td",val:null},{key:"fum",val:null},{key:"fum_lost",val:null}]};t.gameStats=e.data.data,t.stats=new s,t.newStats=function(){a.addNew(t.stats).success(function(e){"success"==e.status?(t.stats=new s,t.toggleInput(),a.load().success(function(a){t.gameStats=a.data})):"game_pk"==e.message.constraint?alert("Error: That game already exists in the database. Delete it first if you want to update it"):alert("Error: "+JSON.stringify(e.message.detail))})},t.toggleInput=function(){t._showInput=!t._showInput},t.deleteRow=function(){a.remove({week:$("#row2delete").val().split(" ")[1]}).success(function(e){"success"==e.status&&a.load().success(function(a){t.gameStats=a.data})})}}]),angular.module("winston").config(["$stateProvider",function(t,a){t.state("home",{url:"/",templateUrl:"updateStats.html",controller:"mainCTRL",resolve:{preloadObj:["$http",function(t){return t({method:"GET",url:"/api/stats"})}]}})}]).run(["$state",function(t){t.go("home")}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsImFwaVNWQy5qcyIsIm1haW5DVExSTC5qcyIsInJvdXRlcy5qcyJdLCJuYW1lcyI6WyJhbmd1bGFyIiwibW9kdWxlIiwic2VydmljZSIsIiRodHRwIiwidGhpcyIsImFkZE5ldyIsIml0ZW0iLCJwb3N0IiwicmVtb3ZlIiwibG9hZCIsImdldCIsImNvbnRyb2xsZXIiLCIkc2NvcGUiLCJhcGlTVkMiLCJwcmVsb2FkT2JqIiwiX3Nob3dJbnB1dCIsInN0YXRzIiwia2V5IiwidmFsIiwiZ2FtZVN0YXRzIiwiZGF0YSIsIm5ld1N0YXRzIiwic3VjY2VzcyIsInJlc3VsdCIsInN0YXR1cyIsInRvZ2dsZUlucHV0IiwibWVzc2FnZSIsImNvbnN0cmFpbnQiLCJhbGVydCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkZXRhaWwiLCJkZWxldGVSb3ciLCJ3ZWVrIiwiJCIsInNwbGl0IiwicmVzcG9uc2UiLCJjb25maWciLCIkc3RhdGVQcm92aWRlciIsInNlYXJjaFN2YyIsInN0YXRlIiwidXJsIiwidGVtcGxhdGVVcmwiLCJyZXNvbHZlIiwibWV0aG9kIiwicnVuIiwiJHN0YXRlIiwiZ28iXSwibWFwcGluZ3MiOiJBQUNBQSxRQUFBQyxPQUFBLFdBQUEsY0NEQUQsUUFBQUMsT0FBQSxXQUNBQyxRQUFBLFVBQUEsUUFBQSxTQUFBQyxHQUNBQyxLQUFBQyxPQUFBLFNBQUFDLEdBQ0EsTUFBQUgsR0FBQUksS0FBQSxpQkFBQUQsSUFFQUYsS0FBQUksT0FBQSxTQUFBRixHQUNBLE1BQUFILEdBQUFJLEtBQUEsb0JBQUFELElBRUFGLEtBQUFLLEtBQUEsV0FDQSxNQUFBTixHQUFBTyxJQUFBLGtCQ1RBVixRQUFBQyxPQUFBLFdBQ0FVLFdBQUEsWUFBQSxTQUFBLFNBQUEsYUFBQSxTQUFBQyxFQUFBQyxFQUFBQyxHQUNBRixFQUFBRyxZQUFBLENBQ0EsSUFBQUMsR0FBQSxXQUNBLFFBRUFDLElBQUEsT0FDQUMsSUFBQSxPQUdBRCxJQUFBLE9BQ0FDLElBQUEsT0FHQUQsSUFBQSxJQUNBQyxJQUFBLE9BR0FELElBQUEsS0FDQUMsSUFBQSxPQUdBRCxJQUFBLFlBQ0FDLElBQUEsT0FHQUQsSUFBQSxXQUNBQyxJQUFBLE9BR0FELElBQUEsV0FDQUMsSUFBQSxPQUdBRCxJQUFBLFdBQ0FDLElBQUEsT0FHQUQsSUFBQSxXQUNBQyxJQUFBLE9BR0FELElBQUEsVUFDQUMsSUFBQSxPQUdBRCxJQUFBLFdBQ0FDLElBQUEsT0FHQUQsSUFBQSxXQUNBQyxJQUFBLE9BR0FELElBQUEsWUFDQUMsSUFBQSxPQUdBRCxJQUFBLFlBQ0FDLElBQUEsT0FHQUQsSUFBQSxXQUNBQyxJQUFBLE9BR0FELElBQUEsV0FDQUMsSUFBQSxPQUdBRCxJQUFBLFdBQ0FDLElBQUEsT0FHQUQsSUFBQSxVQUNBQyxJQUFBLE9BR0FELElBQUEsTUFDQUMsSUFBQSxPQUdBRCxJQUFBLFdBQ0FDLElBQUEsT0FJQU4sR0FBQU8sVUFBQUwsRUFBQU0sS0FBQUEsS0FDQVIsRUFBQUksTUFBQSxHQUFBQSxHQUNBSixFQUFBUyxTQUFBLFdBQ0FSLEVBQUFSLE9BQUFPLEVBQUFJLE9BQUFNLFFBQUEsU0FBQUMsR0FDQSxXQUFBQSxFQUFBQyxRQUNBWixFQUFBSSxNQUFBLEdBQUFBLEdBQ0FKLEVBQUFhLGNBQ0FaLEVBQUFKLE9BQUFhLFFBQUEsU0FBQUYsR0FDQVIsRUFBQU8sVUFBQUMsRUFBQUEsUUFFQSxXQUFBRyxFQUFBRyxRQUFBQyxXQUNBQyxNQUFBLDZGQUdBQSxNQUFBLFVBQUFDLEtBQUFDLFVBQUFQLEVBQUFHLFFBQUFLLFlBS0FuQixFQUFBYSxZQUFBLFdBQ0FiLEVBQUFHLFlBQUFILEVBQUFHLFlBRUFILEVBQUFvQixVQUFBLFdBQ0FuQixFQUFBTCxRQUFBeUIsS0FBQUMsRUFBQSxlQUFBaEIsTUFBQWlCLE1BQUEsS0FBQSxLQUFBYixRQUFBLFNBQUFjLEdBQ0EsV0FBQUEsRUFBQVosUUFDQVgsRUFBQUosT0FBQWEsUUFBQSxTQUFBRixHQUNBUixFQUFBTyxVQUFBQyxFQUFBQSxhQ2pIQXBCLFFBQUFDLE9BQUEsV0FDQW9DLFFBQUEsaUJBQUEsU0FBQUMsRUFBQUMsR0FFQUQsRUFBQUUsTUFBQSxRQUNBQyxJQUFBLElBQ0FDLFlBQUEsbUJBQ0EvQixXQUFBLFdBQ0FnQyxTQUNBN0IsWUFBQSxRQUFBLFNBQUFYLEdBQ0EsTUFBQUEsSUFBQXlDLE9BQUEsTUFBQUgsSUFBQSx1QkFzQkFJLEtBQUEsU0FBQSxTQUFBQyxHQUVBQSxFQUFBQyxHQUFBIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIFRoaXMgbmVlZHMgdG8gYmUgbG9hZGVkIGZpcnN0IGJlY2F1c2UgaXQgZGVmaW5lcyB0aGUgZGVwZW5kZW5jaWVzLiBUaGUgZ3VscCB0YXNrIHdpbGwgYWx3YXlzIGNvbmNhdCB0aGlzIHRvIHRoZSB0b3Agb2YgZmlsZVxuYW5ndWxhci5tb2R1bGUoJ3dpbnN0b24nLCBbJ3VpLnJvdXRlciddKTsiLCJhbmd1bGFyLm1vZHVsZSgnd2luc3RvbicpXG4uc2VydmljZSgnYXBpU1ZDJywgZnVuY3Rpb24oJGh0dHApIHtcbiAgICAgICAgdGhpcy5hZGROZXcgPSBmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvc3RhdHMvYWRkJyxpdGVtKVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnJlbW92ZSA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9zdGF0cy9yZW1vdmUnLGl0ZW0pXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9zdGF0cycpXG4gICAgICAgIH1cbiAgICB9KTsiLCJhbmd1bGFyLm1vZHVsZSgnd2luc3RvbicpXG4gICAgLmNvbnRyb2xsZXIoJ21haW5DVFJMJyxmdW5jdGlvbigkc2NvcGUsYXBpU1ZDLHByZWxvYWRPYmope1xuICAgICAgICAkc2NvcGUuX3Nob3dJbnB1dCA9IGZhbHNlO1xuICAgICAgICB2YXIgc3RhdHMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBrZXk6ICd3ZWVrJyxcbiAgICAgICAgICAgICAgICAgICAgdmFsOiBudWxsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGtleTogJ2RhdGUnLFxuICAgICAgICAgICAgICAgICAgICB2YWw6IG51bGxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAga2V5OiAnZycsXG4gICAgICAgICAgICAgICAgICAgIHZhbDogbnVsbFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBrZXk6ICdncycsXG4gICAgICAgICAgICAgICAgICAgIHZhbDogbnVsbFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBrZXk6ICdwYXNzX2NvbXAnLFxuICAgICAgICAgICAgICAgICAgICB2YWw6IG51bGxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAga2V5OiAncGFzc19hdHQnLFxuICAgICAgICAgICAgICAgICAgICB2YWw6IG51bGxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAga2V5OiAncGFzc19wY3QnLFxuICAgICAgICAgICAgICAgICAgICB2YWw6IG51bGxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAga2V5OiAncGFzc195ZHMnLFxuICAgICAgICAgICAgICAgICAgICB2YWw6IG51bGxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAga2V5OiAncGFzc19hdmcnLFxuICAgICAgICAgICAgICAgICAgICB2YWw6IG51bGxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAga2V5OiAncGFzc190ZCcsXG4gICAgICAgICAgICAgICAgICAgIHZhbDogbnVsbFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBrZXk6ICdwYXNzX2ludCcsXG4gICAgICAgICAgICAgICAgICAgIHZhbDogbnVsbFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBrZXk6ICdwYXNzX3NjaycsXG4gICAgICAgICAgICAgICAgICAgIHZhbDogbnVsbFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBrZXk6ICdwYXNzX3Nja3knLFxuICAgICAgICAgICAgICAgICAgICB2YWw6IG51bGxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAga2V5OiAncGFzc19yYXRlJyxcbiAgICAgICAgICAgICAgICAgICAgdmFsOiBudWxsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGtleTogJ3J1c2hfYXR0JyxcbiAgICAgICAgICAgICAgICAgICAgdmFsOiBudWxsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGtleTogJ3J1c2hfeWRzJyxcbiAgICAgICAgICAgICAgICAgICAgdmFsOiBudWxsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGtleTogJ3J1c2hfYXZnJyxcbiAgICAgICAgICAgICAgICAgICAgdmFsOiBudWxsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGtleTogJ3J1c2hfdGQnLFxuICAgICAgICAgICAgICAgICAgICB2YWw6IG51bGxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAga2V5OiAnZnVtJyxcbiAgICAgICAgICAgICAgICAgICAgdmFsOiBudWxsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGtleTogJ2Z1bV9sb3N0JyxcbiAgICAgICAgICAgICAgICAgICAgdmFsOiBudWxsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXTtcbiAgICAgICAgfTtcbiAgICAgICAgJHNjb3BlLmdhbWVTdGF0cyA9IHByZWxvYWRPYmouZGF0YS5kYXRhO1xuICAgICAgICAkc2NvcGUuc3RhdHMgPSBuZXcgc3RhdHMoKTtcbiAgICAgICAgJHNjb3BlLm5ld1N0YXRzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBhcGlTVkMuYWRkTmV3KCRzY29wZS5zdGF0cykuc3VjY2VzcyhmdW5jdGlvbihyZXN1bHQpe1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuc3RhdHVzID09IFwic3VjY2Vzc1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zdGF0cyA9IG5ldyBzdGF0cygpO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUudG9nZ2xlSW5wdXQoKTtcbiAgICAgICAgICAgICAgICAgICAgYXBpU1ZDLmxvYWQoKS5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5nYW1lU3RhdHMgPSBkYXRhLmRhdGE7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChyZXN1bHQubWVzc2FnZS5jb25zdHJhaW50ID09ICdnYW1lX3BrJykge1xuICAgICAgICAgICAgICAgICAgICBhbGVydChcIkVycm9yOiBUaGF0IGdhbWUgYWxyZWFkeSBleGlzdHMgaW4gdGhlIGRhdGFiYXNlLiBEZWxldGUgaXQgZmlyc3QgaWYgeW91IHdhbnQgdG8gdXBkYXRlIGl0XCIpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhbGVydChcIkVycm9yOiBcIiArIEpTT04uc3RyaW5naWZ5KHJlc3VsdC5tZXNzYWdlLmRldGFpbCkpXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgJHNjb3BlLnRvZ2dsZUlucHV0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkc2NvcGUuX3Nob3dJbnB1dCA9ICEkc2NvcGUuX3Nob3dJbnB1dDtcbiAgICAgICAgfTtcbiAgICAgICAgJHNjb3BlLmRlbGV0ZVJvdyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgYXBpU1ZDLnJlbW92ZSh7d2VlazogJCgnI3JvdzJkZWxldGUnKS52YWwoKS5zcGxpdCgnICcpWzFdfSkuc3VjY2VzcyhmdW5jdGlvbihyZXNwb25zZSl7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PSAnc3VjY2VzcycpIHtcbiAgICAgICAgICAgICAgICAgICAgYXBpU1ZDLmxvYWQoKS5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5nYW1lU3RhdHMgPSBkYXRhLmRhdGE7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH0pOyIsImFuZ3VsYXIubW9kdWxlKCd3aW5zdG9uJylcbiAgICAuY29uZmlnKFsnJHN0YXRlUHJvdmlkZXInLGZ1bmN0aW9uKCRzdGF0ZVByb3ZpZGVyLCBzZWFyY2hTdmMpe1xuICAgICAgICAvLyBUaGVzZSBzdGF0ZXMgY29ycmVzcG9uZCB0byB0aGUgcGFnZXMgb24gdGhlIGFwcC4gSG9va3MgdXAgdGVtcGxhdGVzIGFuZCB2aWV3c1xuICAgICAgICAkc3RhdGVQcm92aWRlci5zdGF0ZSgnaG9tZScse1xuICAgICAgICAgICAgdXJsOiAnLycsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3VwZGF0ZVN0YXRzLmh0bWwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogJ21haW5DVFJMJyxcbiAgICAgICAgICAgIHJlc29sdmU6IHtcbiAgICAgICAgICAgICAgICBwcmVsb2FkT2JqOiBmdW5jdGlvbigkaHR0cCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJGh0dHAoe21ldGhvZDonR0VUJyx1cmw6Jy9hcGkvc3RhdHMnfSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICAgICAgLy8uc3RhdGUoJ3NlYXJjaCcse1xuICAgICAgICAgICAgLy8gICAgdXJsOiAnL3NlYXJjaCcsXG4gICAgICAgICAgICAvLyAgICB0ZW1wbGF0ZVVybDogJ3NlYXJjaC5odG1sJyxcbiAgICAgICAgICAgIC8vICAgIGNvbnRyb2xsZXI6ICdzZWFyY2hDVFJMJyxcbiAgICAgICAgICAgIC8vICAgIHJlc29sdmU6IHtcbiAgICAgICAgICAgIC8vICAgICAgICAvLyBUaGlzIHF1ZXJpZXMgdGhlIHNlcnZlciBmb3IgZGlzdGluY3QgZGVwYXJ0bWVudHMgYW5kIHByZWxvYWRzIHRoZSBkZXBhcnRtZW50cyBkcm9wIGRvd25cbiAgICAgICAgICAgIC8vICAgICAgICBwcmVsb2FkT0JKOiBmdW5jdGlvbigkaHR0cCkge1xuICAgICAgICAgICAgLy8gICAgICAgICAgICByZXR1cm4gJGh0dHAoe21ldGhvZDonR0VUJyx1cmw6Jy9hcGkvZGVwYXJ0bWVudHMnfSk7XG4gICAgICAgICAgICAvLyAgICAgICAgfVxuICAgICAgICAgICAgLy8gICAgfVxuICAgICAgICAgICAgLy99KVxuICAgICAgICAgICAgLy8uc3RhdGUoJ2RldGFpbHMnLHtcbiAgICAgICAgICAgIC8vICAgIC8vIFRoZSA6aWQgaXMgdGhlIHN0cmluZyBwYXNzZWQgaW4gZnJvbSB0aGUgVVJMIGNvcnJlc3BvbmRzIHRvIHRoZSBwZXJzb25JRCBpbiB0aGUgdGhlIGRhdGFiYXNlXG4gICAgICAgICAgICAvLyAgICB1cmw6ICcvZGV0YWlscy86aWQnLFxuICAgICAgICAgICAgLy8gICAgdGVtcGxhdGVVcmw6ICdkZXRhaWxzLmh0bWwnLFxuICAgICAgICAgICAgLy8gICAgY29udHJvbGxlcjogJ2RldGFpbENUUkwnXG4gICAgICAgICAgICAvL30pXG4gICAgfV0pXG4gICAgLnJ1bihbJyRzdGF0ZScsZnVuY3Rpb24oJHN0YXRlKXtcbiAgICAgICAgLy8gRXZlcnl0aGluZyBpbnNpZGUgaGVyZSB3aWxsIGJlIHJ1biBvbmUgdGltZSBvbmNlIHRoZSBhcHAgaGFzIGxvYWRlZC4gR29vZCBwbGFjZSB0byBpbml0aWFsaXplIGFueXRoaW5nIHlvdSB3aWxsIGJlIHVzaW5nXG4gICAgICAgICRzdGF0ZS5nbygnaG9tZScpO1xuICAgIH1dKTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==