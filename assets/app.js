angular.module("winston",["ui.router"]),angular.module("winston").service("apiSVC",["$http",function(a){this.addNew=function(s){return a.post("/api/stats/add",s)},this.remove=function(s){return a.post("/api/stats/remove",s)},this.load=function(){return a.get("/api/stats")}}]),angular.module("winston").controller("mainCTRL",["$scope","apiSVC","preloadObj",function(a,s,t){a._showInput=!1;var n=function(){return[{key:"week",val:null},{key:"date",val:null},{key:"g",val:null},{key:"gs",val:null},{key:"pass_comp",val:null},{key:"pass_att",val:null},{key:"pass_pct",val:null},{key:"pass_yds",val:null},{key:"pass_avg",val:null},{key:"pass_td",val:null},{key:"pass_int",val:null},{key:"pass_sck",val:null},{key:"pass_scky",val:null},{key:"pass_rate",val:null},{key:"rush_att",val:null},{key:"rush_yds",val:null},{key:"rush_avg",val:null},{key:"rush_td",val:null},{key:"fum",val:null},{key:"fum_lost",val:null}]};a.gameStats=t.data.data.winston,a.stats=new n,a.newStats=function(){s.addNew(a.stats).success(function(t){"success"==t.status?(a.stats=new n,a.toggleInput(),s.load().success(function(s){a.gameStats=s.data.winston})):"game_pk"==t.message.constraint?alert("Error: That game already exists in the database. Delete it first if you want to update it"):alert("Error: "+JSON.stringify(t.message.detail))})},a.toggleInput=function(){a._showInput=!a._showInput},a.deleteRow=function(){s.remove({week:$("#row2delete").val().split(" ")[1]}).success(function(t){"success"==t.status&&s.load().success(function(s){a.gameStats=s.data.winston})})},a.maxGames=function(){var s=0;_.forEach(a.players,function(a){a.games.length>s&&(s=a.games.length)});for(var t=[],n=1;s+1>n;n++)t.push(n);return t},a.players=t.data.data.players,a.games=t.data.data.games,_.forEach(a.players,function(s){s.games=[],_.forEach(a.games,function(a){a.player===s.id&&s.games.push(a)})});var e=function(a,s){function t(a){if(null!=a.passing_att&&0!=a.passing_att){var s=5*(e.passing_comp/e.passing_att-.3),t=.25*(e.passing_yds/e.passing_att-3),n=e.passing_td/e.passing_att*20,l=2.375-e.passing_int/e.passing_att*25;return s>2.375&&(s=2.375),0>s&&(s=0),t>2.375&&(t=2.375),0>t&&(t=0),n>2.375&&(n=2.375),0>n&&(n=0),l>2.375&&(l=2.375),0>l&&(l=0),(s+t+n+l)/6*100}}var n=_.take(a.games,s),e={passing_comp:0,passing_yds:0,passing_td:0,passing_att:0,passing_int:0};return _.forEach(n,function(a){null!=a.passing_comp&&(e.passing_comp+=a.passing_comp),null!=a.passing_yds&&(e.passing_yds+=a.passing_yds),null!=a.passing_td&&(e.passing_td+=a.passing_td),null!=a.passing_att&&(e.passing_att+=a.passing_att),null!=a.passing_int&&(e.passing_int+=a.passing_int)}),a.rating=t(e),a};a.ratePlayers=function(){var s=$("#week2rate").val().split(" ")[1];a.rated=[],_.forEach(a.players,function(t){e(t,s),a.rated.push({player:t.name,rating:t.rating,id:"p"+t.id})})}}]),angular.module("winston").config(["$stateProvider",function(a,s){a.state("home",{url:"/",templateUrl:"updateStats.html",controller:"mainCTRL",resolve:{preloadObj:["$http",function(a){return a({method:"GET",url:"/api/stats"})}]}})}]).run(["$state",function(a){a.go("home")}]);
//# sourceMappingURL=data:application/json;base64,