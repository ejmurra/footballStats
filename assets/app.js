angular.module("winston",["ui.router"]),angular.module("winston").service("apiSVC",["$http",function(t){this.addNew=function(a){return t.post("/api/stats/add",a)},this.remove=function(){return t.get("/api/stats/remove")},this.load=function(){return t.get("/api/stats")}}]),angular.module("winston").controller("mainCTRL",["$scope","apiSVC","preloadObj",function(t,a,s){function e(a){_.forEach(t.players,function(s){function e(t){var a,s=[];_.forEach(t.games,function(e,n){if(!a&&1==e.g&&e.passing_att){if(a={passing_comp:0,passing_yds:0,passing_td:0,passing_att:0,passing_int:0},null!=e.passing_comp&&(a.passing_comp+=e.passing_comp),null!=e.passing_yds&&(a.passing_yds+=e.passing_yds),null!=e.passing_td&&(a.passing_td+=e.passing_td),null!=e.passing_att&&(a.passing_att+=e.passing_att),null!=e.passing_int&&(a.passing_int+=e.passing_int),null!=a.passing_att&&0!=a.passing_att){var l=5*(a.passing_comp/a.passing_att-.3),i=.25*(a.passing_yds/a.passing_att-3),r=a.passing_td/a.passing_att*20,o=2.375-a.passing_int/a.passing_att*25;l>2.375&&(l=2.375),0>l&&(l=0),i>2.375&&(i=2.375),0>i&&(i=0),r>2.375&&(r=2.375),0>r&&(r=0),o>2.375&&(o=2.375),0>o&&(o=0);var u=(l+i+r+o)/6*100;s.push({week:n+1,rating:Math.round(100*(u+1e-5))/100,pid:t.id})}}else if(a||e.g)if(a||1!=e.g||e.passing_att){if(null!=e.passing_comp&&(a.passing_comp+=e.passing_comp),null!=e.passing_yds&&(a.passing_yds+=e.passing_yds),null!=e.passing_td&&(a.passing_td+=e.passing_td),null!=e.passing_att&&(a.passing_att+=e.passing_att),null!=e.passing_int&&(a.passing_int+=e.passing_int),null!=a.passing_att&&0!=a.passing_att){var l=5*(a.passing_comp/a.passing_att-.3),i=.25*(a.passing_yds/a.passing_att-3),r=a.passing_td/a.passing_att*20,o=2.375-a.passing_int/a.passing_att*25;l>2.375&&(l=2.375),0>l&&(l=0),i>2.375&&(i=2.375),0>i&&(i=0),r>2.375&&(r=2.375),0>r&&(r=0),o>2.375&&(o=2.375),0>o&&(o=0);var u=(l+i+r+o)/6*100;s.push({week:n+1,rating:Math.round(100*(u+1e-5))/100,pid:t.id})}}else{var p=s[s.length-1],c={week:p.week+1,rating:p.rating,pid:t.id};s.push(c)}else s.push({week:n+1,rating:null,pid:t.id})});var e={};return _.forEach(s,function(t){e[t.week]=t}),_.forEach(e,function(a,s){a||(0!=s?(a=e[s-1],a.week++):(a.week=1,a.rating=null,a.pid=t.id))}),e}s.games=[],_.forEach(t.games,function(t){t.player==s.id&&s.games.push(t)}),_.sortBy(s.games,function(t){return t.week});var n=_.values(e(s));s.ratings=_.take(n,a)}),_.forEach(t.players,function(t){t.className="jameis",1!=t.id&&(t.className="other"),t.ratings.forEach(function(a,s){a?(a.week=+a.week,a.rating=a.rating,a.pid=t.id):0!=s&&null!=t.ratings[s]?t.ratings[s]={week:t.ratings[s].week+1,rating:t.ratings[s].rating,pid:t.id}:t.ratings[s]={week:s+1,rating:null,pid:t.id}})});var s={top:20,right:20,bottom:30,left:50},e=960-s.right-s.left,n=500-s.top-s.bottom,l=d3.scale.linear().range([0,e]),i=d3.scale.linear().range([n,0]),r=d3.svg.axis().scale(l).orient("bottom").tickValues(d3.range(1,a+1)).tickFormat(d3.format("d")),o=d3.svg.axis().scale(i).orient("left"),u=d3.svg.line().x(function(t){return l(t.week)}).y(function(t){return i(t.rating)}).interpolate("basis"),p=d3.select("#graph").select_or_append("svg").attr("width",e+s.left+s.right).attr("height",n+s.top+s.bottom).select_or_append("g.container").attr("transform","translate("+s.left+","+s.top+")");l.domain([1,Number(a)]),i.domain([0,160]);var c=p.select_or_append("g.lines").selectAll("path").data(t.players.reverse(),function(t){return t?t.id:void 0});c.enter().append("path").attr("class",function(t){return t.className}).attr("name",function(t){return t.name}).attr("d",function(t){return u(t.ratings)}),c.attr("class",function(t){return t.className}).attr("name",function(t){return t.name}).transition().attr("d",function(t){return u(t.ratings)}),c.exit().remove(),p.select_or_append("g.x").attr("class","x axis").attr("transform","translate(0,"+n+")").call(r).select_or_append("text.xaxis").attr("y",25).attr("x",450).style("text-anchor","end").style("dy",".71em").text("Week"),p.select_or_append("g.y").attr("class","y axis").call(o).select_or_append("text.yaxis").attr("transform","rotate(-90)").attr("y",-50).attr("x",-150).attr("dy",".71em").style("text-anchor","end").text("QB Rating (cumulative)")}t._showInput=!1;var n=function(){return[{key:"week",val:null},{key:"date",val:null},{key:"g",val:null},{key:"gs",val:null},{key:"pass_comp",val:null},{key:"pass_att",val:null},{key:"pass_pct",val:null},{key:"pass_yds",val:null},{key:"pass_avg",val:null},{key:"pass_td",val:null},{key:"pass_int",val:null},{key:"pass_sck",val:null},{key:"pass_scky",val:null},{key:"pass_rate",val:null},{key:"rush_att",val:null},{key:"rush_yds",val:null},{key:"rush_avg",val:null},{key:"rush_td",val:null},{key:"fum",val:null},{key:"fum_lost",val:null}]},l=function(){return[{key:"date",val:null},{key:"g",val:null},{key:"gs",val:null},{key:"pass_comp",val:null},{key:"pass_att",val:null},{key:"pass_pct",val:null},{key:"pass_yds",val:null},{key:"pass_avg",val:null},{key:"pass_td",val:null},{key:"pass_int",val:null},{key:"pass_sck",val:null},{key:"pass_scky",val:null},{key:"pass_rate",val:null},{key:"rush_att",val:null},{key:"rush_yds",val:null},{key:"rush_avg",val:null},{key:"rush_td",val:null},{key:"fum",val:null},{key:"fum_lost",val:null}]};"err"==s.data.status&&console.log(s.data.message),t.gameStats=s.data.data.winston,t.stats=new n,t.Ustats=new l,t.newStats=function(){a.addNew(t.Ustats).success(function(s){"success"==s.status?(t.Ustats=new l,t.toggleInput(),a.load().success(function(a){t.gameStats=a.data.winston})):"game_pk"==s.message.constraint?alert("Error: That game already exists in the database. Delete it first if you want to update it"):alert("Error: "+JSON.stringify(s.message.detail))})},t.toggleInput=function(){t._showInput=!t._showInput},t.deleteRow=function(){0!=t.gameStats&&a.remove().success(function(s){"success"==s.status&&a.load().success(function(a){t.gameStats=a.data.winston})})},t.maxGames=function(){var a=0;_.forEach(t.players,function(t){t.games.length>a&&(a=t.games.length)});for(var s=[],e=1;a+1>e;e++)s.push(e);return s},t.players=s.data.data.players,t.games=s.data.data.games,_.forEach(t.players,function(a){a.games=[],_.forEach(t.games,function(t){t.player===a.id&&a.games.push(t)})});var i=function(t,a){function s(t){if(null!=t.passing_att&&0!=t.passing_att){var a=5*(n.passing_comp/n.passing_att-.3),s=.25*(n.passing_yds/n.passing_att-3),e=n.passing_td/n.passing_att*20,l=2.375-n.passing_int/n.passing_att*25;return a>2.375&&(a=2.375),0>a&&(a=0),s>2.375&&(s=2.375),0>s&&(s=0),e>2.375&&(e=2.375),0>e&&(e=0),l>2.375&&(l=2.375),0>l&&(l=0),(a+s+e+l)/6*100}}var e=_.take(t.games,a),n={passing_comp:0,passing_yds:0,passing_td:0,passing_att:0,passing_int:0};return _.forEach(e,function(t){null!=t.passing_comp&&(n.passing_comp+=t.passing_comp),null!=t.passing_yds&&(n.passing_yds+=t.passing_yds),null!=t.passing_td&&(n.passing_td+=t.passing_td),null!=t.passing_att&&(n.passing_att+=t.passing_att),null!=t.passing_int&&(n.passing_int+=t.passing_int)}),t.rating=s(n),t};t.ratePlayers=function(){t.chartActive=!0;var s=$("#week2rate").val().split(" ")[1],n=[];t.rated=[],a.load().success(function(a){t.players=a.data.players,t.games=a.data.games,t.gameStates=a.data.winston,_.forEach(t.players,function(a){a.games=[],_.forEach(t.games,function(t){t.player===a.id&&a.games.push(t)}),_.sortBy(a.games,function(t){return t.week})}),_.forEach(t.players,function(t){i(t,s),n.push({player:t.name,rating:Math.round(100*(t.rating+1e-5))/100,id:"p"+t.id})});var l=_.sortBy(n,function(t){return t.rating});l=_.filter(l,function(t){return t.rating}),_.forEach(l.reverse(),function(a,s){a.rank=s+1,t.rated.push(a)}),e(s)})},t.chartActive=!1,t.dl=function(){function t(){var t=[window.document],s=[];iframes=document.querySelectorAll("iframe"),objects=document.querySelectorAll("object");var l=window.document.createElementNS(o.svg,"svg");window.document.body.appendChild(l);var i=getComputedStyle(l);[].forEach.call(iframes,function(a){try{a.contentDocument&&t.push(a.contentDocument)}catch(s){console.log(s)}}),[].forEach.call(objects,function(a){try{a.contentDocument&&t.push(a.contentDocument)}catch(s){console.log(s)}}),t.forEach(function(t){for(var a=e(t,i),n=0;n<a.length;n++)s.push(a[n])}),s.length>1?a(s):s.length>0?n(s[0]):alert("The Crowbar couldnâ€™t find any SVG nodes.")}function a(t){s(),t.forEach(function(a){t.forEach(function(t){a!==t&&Math.abs(a.top-t.top)<38&&Math.abs(a.left-t.left)<38&&(t.top+=38,t.left+=38)})});var a=document.createElement("div");r.appendChild(a),a.setAttribute("class","svg-crowbar"),a.style["z-index"]=1e7,a.style.position="absolute",a.style.top=0,a.style.left=0;var e=document.createElement("div");r.appendChild(e),e.setAttribute("class","svg-crowbar"),e.style.background="rgba(255, 255, 255, 0.7)",e.style.position="fixed",e.style.left=0,e.style.top=0,e.style.width="100%",e.style.height="100%",t.forEach(function(t,s){var e=document.createElement("div");a.appendChild(e),e.setAttribute("class","svg-crowbar"),e.style.position="absolute",e.style.top=t.top+document.body.scrollTop+"px",e.style.left=document.body.scrollLeft+t.left+"px",e.style.padding="4px",e.style["border-radius"]="3px",e.style.color="white",e.style["text-align"]="center",e.style["font-family"]="'Helvetica Neue'",e.style.background="rgba(0, 0, 0, 0.8)",e.style["box-shadow"]="0px 4px 18px rgba(0, 0, 0, 0.4)",e.style.cursor="move",e.textContent="SVG #"+s+": "+(t.id?"#"+t.id:"")+(t["class"]?"."+t["class"]:"");var l=document.createElement("button");e.appendChild(l),l.setAttribute("data-source-id",s),l.style.width="150px",l.style["font-size"]="12px",l.style["line-height"]="1.4em",l.style.margin="5px 0 0 0",l.textContent="Download",l.onclick=function(a){n(t)}})}function s(){var t=document.querySelectorAll(".svg-crowbar");[].forEach.call(t,function(t){t.parentNode.removeChild(t)})}function e(t,a){var s=[],e=t.querySelectorAll("svg");return[].forEach.call(e,function(t){t.setAttribute("version","1.1"),t.removeAttribute("xmlns"),t.removeAttribute("xlink"),t.hasAttributeNS(o.xmlns,"xmlns")||t.setAttributeNS(o.xmlns,"xmlns",o.svg),t.hasAttributeNS(o.xmlns,"xmlns:xlink")||t.setAttributeNS(o.xmlns,"xmlns:xlink",o.xlink),l(t,a);var e=(new XMLSerializer).serializeToString(t),n=t.getBoundingClientRect();s.push({top:n.top,left:n.left,width:n.width,height:n.height,"class":t.getAttribute("class"),id:t.getAttribute("id"),childElementCount:t.childElementCount,source:[i+e]})}),s}function n(t){var a="untitled";t.id?a=t.id:t["class"]?a=t["class"]:window.document.title&&(a=window.document.title.replace(/[^a-z0-9]/gi,"-").toLowerCase());var s=window.URL.createObjectURL(new Blob(t.source,{type:"text/xml"})),e=document.createElement("a");r.appendChild(e),e.setAttribute("class","svg-crowbar"),e.setAttribute("download",a+".svg"),e.setAttribute("href",s),e.style.display="none",e.click(),setTimeout(function(){window.URL.revokeObjectURL(s)},10)}function l(t,a){function s(t){var s,e,n,l,i=getComputedStyle(t),r="";for(s=0,e=i.length;e>s;s++)n=i[s],l=i.getPropertyValue(n),l!==a.getPropertyValue(n)&&(r+=n+":"+l+";");t.setAttribute("style",r)}function e(t){function a(t){if(t&&t.hasChildNodes())for(var e=t.firstChild;e;)1===e.nodeType&&"SCRIPT"!=e.nodeName&&(s.push(e),a(e)),e=e.nextSibling}var s=[];return s.push(t),a(t),s}for(var n=e(t),l=n.length;l--;)s(n[l])}var i='<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">';window.URL=window.URL||window.webkitURL;var r=document.body,o={xmlns:"http://www.w3.org/2000/xmlns/",xlink:"http://www.w3.org/1999/xlink",svg:"http://www.w3.org/2000/svg"};t()}}]),angular.module("winston").config(["$stateProvider",function(t,a){t.state("home",{url:"/",templateUrl:"updateStats.html",controller:"mainCTRL",resolve:{preloadObj:["$http",function(t){return t({method:"GET",url:"/api/stats"})}]}})}]).run(["$state",function(t){t.go("home")}]);
//# sourceMappingURL=data:application/json;base64,