angular.module("winston",["ui.router"]),angular.module("winston").service("apiSVC",["$http",function(t){this.add=function(e){return t.get("/api/stats/add?"+e)},this.remove=function(e){return t.get("/api/stats/remove?"+e)},this.load=function(){return t.get("/api/stats")}}]),angular.module("winston").controller("mainCTRL",["$scope","apiSVC","preloadObj",function(t,e,a){function n(e){_.forEach(t.players,function(a){function n(t){var e,a=[];_.forEach(t.games,function(n,s){if(!e&&1==n.g&&n.passing_att){if(e={passing_comp:0,passing_yds:0,passing_td:0,passing_att:0,passing_int:0},null!=n.passing_comp&&(e.passing_comp+=n.passing_comp),null!=n.passing_yds&&(e.passing_yds+=n.passing_yds),null!=n.passing_td&&(e.passing_td+=n.passing_td),null!=n.passing_att&&(e.passing_att+=n.passing_att),null!=n.passing_int&&(e.passing_int+=n.passing_int),null!=e.passing_att&&0!=e.passing_att){var r=5*(e.passing_comp/e.passing_att-.3),i=.25*(e.passing_yds/e.passing_att-3),o=e.passing_td/e.passing_att*20,l=2.375-e.passing_int/e.passing_att*25;r>2.375&&(r=2.375),0>r&&(r=0),i>2.375&&(i=2.375),0>i&&(i=0),o>2.375&&(o=2.375),0>o&&(o=0),l>2.375&&(l=2.375),0>l&&(l=0);var c=(r+i+o+l)/6*100;a.push({week:s+1,rating:Math.round(100*(c+1e-5))/100,pid:t.id})}}else if(e||n.g)if(e||1!=n.g||n.passing_att){if(null!=n.passing_comp&&(e.passing_comp+=n.passing_comp),null!=n.passing_yds&&(e.passing_yds+=n.passing_yds),null!=n.passing_td&&(e.passing_td+=n.passing_td),null!=n.passing_att&&(e.passing_att+=n.passing_att),null!=n.passing_int&&(e.passing_int+=n.passing_int),null!=e.passing_att&&0!=e.passing_att){var r=5*(e.passing_comp/e.passing_att-.3),i=.25*(e.passing_yds/e.passing_att-3),o=e.passing_td/e.passing_att*20,l=2.375-e.passing_int/e.passing_att*25;r>2.375&&(r=2.375),0>r&&(r=0),i>2.375&&(i=2.375),0>i&&(i=0),o>2.375&&(o=2.375),0>o&&(o=0),l>2.375&&(l=2.375),0>l&&(l=0);var c=(r+i+o+l)/6*100;a.push({week:s+1,rating:Math.round(100*(c+1e-5))/100,pid:t.id})}}else{var d=a[a.length-1],u={week:d.week+1,rating:d.rating,pid:t.id};a.push(u)}else a.push({week:s+1,rating:null,pid:t.id})});var n={};return _.forEach(a,function(t){n[t.week]=t}),_.forEach(n,function(e,a){e||(0!=a?(e=n[a-1],e.week++):(e.week=1,e.rating=null,e.pid=t.id))}),n}a.games=[],_.forEach(t.games,function(t){t.player==a.id&&a.games.push(t)}),_.sortBy(a.games,function(t){return t.week});var s=_.values(n(a));a.ratings=_.take(s,e)}),_.forEach(t.players,function(t){t.className="other",1===t.id&&(t.className="jameis"),2===t.id&&(t.className="marcus"),t.ratings.forEach(function(e,a){e?(e.week=+e.week,e.rating=e.rating,e.pid=t.id):0!=a&&null!=t.ratings[a]?t.ratings[a]={week:t.ratings[a].week+1,rating:t.ratings[a].rating,pid:t.id}:t.ratings[a]={week:a+1,rating:null,pid:t.id}})});var a={top:20,right:20,bottom:30,left:50},n=960-a.right-a.left,s=500-a.top-a.bottom,r=d3.scale.linear().range([0,n]),i=d3.scale.linear().range([s,0]),o=d3.svg.axis().scale(r).orient("bottom").tickValues(d3.range(1,e+1)).tickFormat(d3.format("d")),l=d3.svg.axis().scale(i).orient("left"),c=d3.svg.line().x(function(t){return r(t.week)}).y(function(t){return i(t.rating)}).interpolate("basis"),d=d3.select("#graph").select_or_append("svg").attr("width",n+a.left+a.right).attr("height",s+a.top+a.bottom).select_or_append("g.container").attr("transform","translate("+a.left+","+a.top+")");r.domain([1,Number(e)]),i.domain([0,160]);var u=d.select_or_append("g.lines").selectAll("path").data(t.players.reverse(),function(t){return t?t.id:void 0});u.enter().append("path").attr("class",function(t){return t.className}).attr("name",function(t){return t.name}).attr("d",function(t){return c(t.ratings)}),u.attr("class",function(t){return t.className}).attr("name",function(t){return t.name}).transition().attr("d",function(t){return c(t.ratings)}),u.exit().remove(),d.select_or_append("g.x").attr("class","x axis").attr("transform","translate(0,"+s+")").call(o).select_or_append("text.xaxis").attr("y",25).attr("x",450).style("text-anchor","end").style("dy",".71em").text("Week"),d.select_or_append("g.y").attr("class","y axis").call(l).select_or_append("text.yaxis").attr("transform","rotate(-90)").attr("y",-50).attr("x",-150).attr("dy",".71em").style("text-anchor","end").text("QB Rating (cumulative)")}t._showInput=!1,t._showInputM=!1;"err"==a.data.status&&console.log(a.data.message),t.gameStats=a.data.data.winston,t.mGameStats=a.data.data.mariota,t.stats=new stats,t.Ustats=new Ustats,t.Mstats=new Ustats,t.newStats=function(){e.addNew(t.Ustats).success(function(a){"success"==a.status?(t.Ustats=new Ustats,t.toggleInput(),e.load().success(function(e){t.gameStats=e.data.winston})):"game_pk"==a.message.constraint?alert("Error: That game already exists in the database. Delete it first if you want to update it"):alert("Error: "+JSON.stringify(a.message.detail))})},t.newStatsM=function(){e.addNewM(t.Mstats).success(function(a){"success"==a.status?(t.Mstats=new Ustats,t.toggleInputM(),e.load().success(function(e){t.mGameStats=e.data.mariota})):"game_pk"==a.message.constraint?alert("Error: That game already exists in the database. Delete it first if you want to update it"):alert("Error: "+JSON.stringify(a.message.detail))})},t.toggleInput=function(){t._showInput=!t._showInput},t.toggleInputM=function(){t._showInputM=!t._showInputM},t.deleteRowM=function(){0!=t.mGameStats&&e.removeM().success(function(a){"success"==a.status&&e.load().success(function(e){t.mGameStats=e.data.mariota})})},t.deleteRow=function(){0!=t.gameStats&&e.remove().success(function(a){"success"==a.status&&e.load().success(function(e){t.gameStats=e.data.winston})})},t.maxGames=function(){var e=0;_.forEach(t.players,function(t){t.games.length>e&&(e=t.games.length)});for(var a=[],n=1;e+1>n;n++)a.push(n);return a},t.players=a.data.data.players,t.games=a.data.data.games,_.forEach(t.players,function(e){e.games=[],_.forEach(t.games,function(t){t.player===e.id&&e.games.push(t)})});var s=function(t,e){function a(t){if(null!=t.passing_att&&0!=t.passing_att){var e=5*(s.passing_comp/s.passing_att-.3),a=.25*(s.passing_yds/s.passing_att-3),n=s.passing_td/s.passing_att*20,r=2.375-s.passing_int/s.passing_att*25;return e>2.375&&(e=2.375),0>e&&(e=0),a>2.375&&(a=2.375),0>a&&(a=0),n>2.375&&(n=2.375),0>n&&(n=0),r>2.375&&(r=2.375),0>r&&(r=0),(e+a+n+r)/6*100}}var n=_.take(t.games,e),s={passing_comp:0,passing_yds:0,passing_td:0,passing_att:0,passing_int:0};return _.forEach(n,function(t){null!=t.passing_comp&&(s.passing_comp+=t.passing_comp),null!=t.passing_yds&&(s.passing_yds+=t.passing_yds),null!=t.passing_td&&(s.passing_td+=t.passing_td),null!=t.passing_att&&(s.passing_att+=t.passing_att),null!=t.passing_int&&(s.passing_int+=t.passing_int)}),t.rating=a(s),t};t.ratePlayers=function(){t.chartActive=!0;var a=$("#week2rate").val().split(" ")[1],r=[];t.rated=[],e.load().success(function(e){t.players=e.data.players,t.games=e.data.games,t.gameStates=e.data.winston,_.forEach(t.players,function(e){e.games=[],_.forEach(t.games,function(t){t.player===e.id&&e.games.push(t)}),_.sortBy(e.games,function(t){return t.week})}),_.forEach(t.players,function(t){s(t,a),r.push({player:t.name,rating:Math.round(100*(t.rating+1e-5))/100,id:"p"+t.id})});var i=_.sortBy(r,function(t){return t.rating});i=_.filter(i,function(t){return t.rating}),_.forEach(i.reverse(),function(e,a){e.rank=a+1,t.rated.push(e)}),n(a)})},t.chartActive=!1,t.dl=function(){function t(){var t=[window.document],a=[];iframes=document.querySelectorAll("iframe"),objects=document.querySelectorAll("object");var r=window.document.createElementNS(l.svg,"svg");window.document.body.appendChild(r);var i=getComputedStyle(r);[].forEach.call(iframes,function(e){try{e.contentDocument&&t.push(e.contentDocument)}catch(a){console.log(a)}}),[].forEach.call(objects,function(e){try{e.contentDocument&&t.push(e.contentDocument)}catch(a){console.log(a)}}),t.forEach(function(t){for(var e=n(t,i),s=0;s<e.length;s++)a.push(e[s])}),a.length>1?e(a):a.length>0?s(a[0]):alert("The Crowbar couldnâ€™t find any SVG nodes.")}function e(t){a(),t.forEach(function(e){t.forEach(function(t){e!==t&&Math.abs(e.top-t.top)<38&&Math.abs(e.left-t.left)<38&&(t.top+=38,t.left+=38)})});var e=document.createElement("div");o.appendChild(e),e.setAttribute("class","svg-crowbar"),e.style["z-index"]=1e7,e.style.position="absolute",e.style.top=0,e.style.left=0;var n=document.createElement("div");o.appendChild(n),n.setAttribute("class","svg-crowbar"),n.style.background="rgba(255, 255, 255, 0.7)",n.style.position="fixed",n.style.left=0,n.style.top=0,n.style.width="100%",n.style.height="100%",t.forEach(function(t,a){var n=document.createElement("div");e.appendChild(n),n.setAttribute("class","svg-crowbar"),n.style.position="absolute",n.style.top=t.top+document.body.scrollTop+"px",n.style.left=document.body.scrollLeft+t.left+"px",n.style.padding="4px",n.style["border-radius"]="3px",n.style.color="white",n.style["text-align"]="center",n.style["font-family"]="'Helvetica Neue'",n.style.background="rgba(0, 0, 0, 0.8)",n.style["box-shadow"]="0px 4px 18px rgba(0, 0, 0, 0.4)",n.style.cursor="move",n.textContent="SVG #"+a+": "+(t.id?"#"+t.id:"")+(t["class"]?"."+t["class"]:"");var r=document.createElement("button");n.appendChild(r),r.setAttribute("data-source-id",a),r.style.width="150px",r.style["font-size"]="12px",r.style["line-height"]="1.4em",r.style.margin="5px 0 0 0",r.textContent="Download",r.onclick=function(e){s(t)}})}function a(){var t=document.querySelectorAll(".svg-crowbar");[].forEach.call(t,function(t){t.parentNode.removeChild(t)})}function n(t,e){var a=[],n=t.querySelectorAll("svg");return[].forEach.call(n,function(t){t.setAttribute("version","1.1"),t.removeAttribute("xmlns"),t.removeAttribute("xlink"),t.hasAttributeNS(l.xmlns,"xmlns")||t.setAttributeNS(l.xmlns,"xmlns",l.svg),t.hasAttributeNS(l.xmlns,"xmlns:xlink")||t.setAttributeNS(l.xmlns,"xmlns:xlink",l.xlink),r(t,e);var n=(new XMLSerializer).serializeToString(t),s=t.getBoundingClientRect();a.push({top:s.top,left:s.left,width:s.width,height:s.height,"class":t.getAttribute("class"),id:t.getAttribute("id"),childElementCount:t.childElementCount,source:[i+n]})}),a}function s(t){var e="untitled";t.id?e=t.id:t["class"]?e=t["class"]:window.document.title&&(e=window.document.title.replace(/[^a-z0-9]/gi,"-").toLowerCase());var a=window.URL.createObjectURL(new Blob(t.source,{type:"text/xml"})),n=document.createElement("a");o.appendChild(n),n.setAttribute("class","svg-crowbar"),n.setAttribute("download",e+".svg"),n.setAttribute("href",a),n.style.display="none",n.click(),setTimeout(function(){window.URL.revokeObjectURL(a)},10)}function r(t,e){function a(t){var a,n,s,r,i=getComputedStyle(t),o="";for(a=0,n=i.length;n>a;a++)s=i[a],r=i.getPropertyValue(s),r!==e.getPropertyValue(s)&&(o+=s+":"+r+";");t.setAttribute("style",o)}function n(t){function e(t){if(t&&t.hasChildNodes())for(var n=t.firstChild;n;)1===n.nodeType&&"SCRIPT"!=n.nodeName&&(a.push(n),e(n)),n=n.nextSibling}var a=[];return a.push(t),e(t),a}for(var s=n(t),r=s.length;r--;)a(s[r])}var i='<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">';window.URL=window.URL||window.webkitURL;var o=document.body,l={xmlns:"http://www.w3.org/2000/xmlns/",xlink:"http://www.w3.org/1999/xlink",svg:"http://www.w3.org/2000/svg"};t()}}]),angular.module("winston").controller("newCTRL",["$scope","apiSVC","preloadObj",function(t,e,a){t.winston=a.data.data[0],t.winston.addStats=!1,t.players=a.data.data,t.mariota=a.data.data[1],t.mariota.addStats=!1,t.graph={weeks:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]},t.toggleWinston=function(){t.winston.addStats=!t.winston.addStats},t.addWinstonStats=function(){var a="player=1&season=2015&",n=[];_.forEach(t.winston["new"],function(t,e){n.push(e+"="+t)}),a+=n.join("&"),e.add(a).success(function(a){"success"===a.status&&e.load().success(function(e){t.winston=e.data[0],t.players=e.data})})},t.deleteWinston=function(){e.remove("player=1&week="+t.winston["delete"].split(" ")[1]).success(function(a){"success"===a.status&&e.load().success(function(e){t.winston=e.data[0],t.players=e.data})})},t.toggleMariota=function(){t.mariota.addStats=!t.mariota.addStats},t.addMariotaStats=function(){var a="player=2&season=2015&",n=[];_.forEach(t.mariota["new"],function(t,e){n.push(e+"="+t)}),a+=n.join("&"),e.add(a).success(function(a){"success"===a.status&&e.load().success(function(e){t.mariota=e.data[1],t.players=e.data})})},t.deleteMariota=function(){e.remove("player=2&week="+t.mariota["delete"].split(" ")[1]).success(function(a){"success"===a.status&&e.load().success(function(e){t.mariota=e.data[1],t.players=e.data})})},t.drawGraph=function(){t.graph.data=[],t.rated=[];var e=t.graph.selected.split(" ")[1];_.forEach(t.players,function(a){var n={name:a.name,ratings:_.take(a.rankings,e),selected:!1};t.graph.data.push(n)}),_.forEach(t.graph.data,function(e){e.ratings[e.ratings.length-1]&&null!==e.ratings[e.ratings.length-1].rating&&t.rated.push({player:e.name,rating:e.ratings[e.ratings.length-1],selected:!1})});var a={top:20,right:20,bottom:30,left:50},n=960-a.left-a.right,s=500-a.top-a.bottom,r=d3.scale.linear().range([0,n]).domain([1,e]),i=d3.scale.linear().domain([0,160]).range([s,0]),o=d3.svg.axis().scale(r).orient("bottom").tickValues(d3.range(1,e+1)).tickFormat(d3.format("d")),l=d3.svg.axis().scale(i).orient("left"),c=d3.svg.line().x(function(t){return r(t.week)}).y(function(t){return i(t.rating)}).interpolate("basis"),d=d3.select("#graph").select_or_append("svg").attr("width",n+a.left+a.right).attr("height",s+a.top+a.bottom).select_or_append("g.container").attr("transform","translate("+a.left+","+a.top+")"),u=d.select_or_append("g.lines").selectAll("path").data(t.graph.data.reverse(),function(t){return t?t.name:void 0});u.enter().append("path").attr("class",function(t){return t.name+" lines"}).attr("d",function(t){return c(t.ratings)}),u.transition().attr("d",function(t){return c(t.ratings)}),u.exit().remove(),d.select_or_append("g.x").attr("class","x axis").attr("transform","translate(0,"+s+")").call(o).select_or_append("text.xaxis").attr("y",25).attr("x",450).style("text-anchor","end").style("dy",".71em").text("Week"),d.select_or_append("g.y").attr("class","y axis").call(l).select_or_append("text.yaxis").attr("transform","rotate(-90)").attr("y",-50).attr("x",-150).attr("dy",".71em").style("text-anchor","end").text("QB Rating (cumulative)");var p={};_.forEach(t.players,function(t){p[t.name]=JSON.parse(t.colors)});var g=d3.select("#controlBox").selectAll("div").data(t.graph.data,function(t){return t?t.name:void 0}).enter().append("div").attr("class","controller").style({border:"4px solid","border-color":function(t){return p[t.name].primary}});g.append("div").html(function(t){return t.name}),g.on("mouseover",function(){d3.select(this).style({"border-color":function(t){return p[t.name].secondary},"background-color":function(t){return p[t.name].primary}}).selectAll("div").style("color","whitesmoke")}),g.on("mouseout",function(t){t.selected||d3.select(this).style({"border-color":function(t){return p[t.name].primary},"background-color":"white"}).selectAll("div").style("color","black")}),g.on("click",function(){var e=d3.select(this).selectAll("div").html(),a=_.filter(t.graph.data,function(t){return t.name===e});_.forEach(a,function(t){t.selected=!t.selected}),g.each(function(t){t.name===e||t.selected?d3.select(this).style({"border-color":function(t){return p[t.name].secondary},"background-color":function(t){return p[t.name].primary}}).selectAll("div").style("color","whitesmoke"):d3.select(this).style({"border-color":function(t){return p[t.name].primary},"background-color":"white"}).selectAll("div").style("color","black")}),u.each(function(t){t.selected?d3.select(this).style({"stroke-width":"3px",stroke:function(t){return p[t.name].primary},"z-index":"10"}):d3.select(this).style({"stroke-width":"1px",stroke:"lightgrey","z-index":"0"})})})}}]),angular.module("winston").config(["$stateProvider",function(t,e){t.state("home",{url:"/",templateUrl:"updateStats.html",controller:"newCTRL",resolve:{preloadObj:["$http",function(t){return t({method:"GET",url:"/api/stats"})}]}})}]).run(["$state",function(t){t.go("home")}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsImFwaVNWQy5qcyIsIm1haW5DVExSTC5qcyIsIm5ld0NUUkwuanMiLCJyb3V0ZXMuanMiXSwibmFtZXMiOlsiYW5ndWxhciIsIm1vZHVsZSIsInNlcnZpY2UiLCIkaHR0cCIsInRoaXMiLCJhZGQiLCJwYXJhbXMiLCJnZXQiLCJyZW1vdmUiLCJsb2FkIiwiY29udHJvbGxlciIsIiRzY29wZSIsImFwaVNWQyIsInByZWxvYWRPYmoiLCJkcmF3R3JhcGhpY3MiLCJ3ZWVrIiwiXyIsImZvckVhY2giLCJwbGF5ZXJzIiwicGxheWVyIiwiZ2V0UmF0aW5ncyIsInN0YXRzQ3VtIiwicmF0aW5ncyIsImdhbWVzIiwiZ2FtZSIsImluZGV4IiwiZyIsInBhc3NpbmdfYXR0IiwicGFzc2luZ19jb21wIiwicGFzc2luZ195ZHMiLCJwYXNzaW5nX3RkIiwicGFzc2luZ19pbnQiLCJhIiwiYiIsImMiLCJkIiwicmF0aW5nIiwicHVzaCIsIk1hdGgiLCJyb3VuZCIsInBpZCIsImlkIiwieCIsImxlbmd0aCIsInkiLCJyYXRpbmdPYmoiLCJpIiwic29ydEJ5IiwidmFsdWVzIiwidGFrZSIsImNsYXNzTmFtZSIsIm1hcmdpbiIsInRvcCIsInJpZ2h0IiwiYm90dG9tIiwibGVmdCIsIndpZHRoIiwiaGVpZ2h0IiwiZDMiLCJzY2FsZSIsImxpbmVhciIsInJhbmdlIiwieEF4aXMiLCJzdmciLCJheGlzIiwib3JpZW50IiwidGlja1ZhbHVlcyIsInRpY2tGb3JtYXQiLCJmb3JtYXQiLCJ5QXhpcyIsImxpbmUiLCJpbnRlcnBvbGF0ZSIsInNlbGVjdCIsInNlbGVjdF9vcl9hcHBlbmQiLCJhdHRyIiwiZG9tYWluIiwiTnVtYmVyIiwibGluZXMiLCJzZWxlY3RBbGwiLCJkYXRhIiwicmV2ZXJzZSIsImVudGVyIiwiYXBwZW5kIiwibmFtZSIsInRyYW5zaXRpb24iLCJleGl0IiwiY2FsbCIsInN0eWxlIiwidGV4dCIsIl9zaG93SW5wdXQiLCJfc2hvd0lucHV0TSIsInN0YXR1cyIsImNvbnNvbGUiLCJsb2ciLCJtZXNzYWdlIiwiZ2FtZVN0YXRzIiwid2luc3RvbiIsIm1HYW1lU3RhdHMiLCJtYXJpb3RhIiwic3RhdHMiLCJVc3RhdHMiLCJNc3RhdHMiLCJuZXdTdGF0cyIsImFkZE5ldyIsInN1Y2Nlc3MiLCJyZXN1bHQiLCJ0b2dnbGVJbnB1dCIsImNvbnN0cmFpbnQiLCJhbGVydCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkZXRhaWwiLCJuZXdTdGF0c00iLCJhZGROZXdNIiwidG9nZ2xlSW5wdXRNIiwiZGVsZXRlUm93TSIsInJlbW92ZU0iLCJyZXNwb25zZSIsImRlbGV0ZVJvdyIsIm1heEdhbWVzIiwibWF4Iiwid2Vla3MiLCJhY2N1bXVsYXRlU3RhdHMiLCJyYXRlIiwicmF0ZVBsYXllcnMiLCJjaGFydEFjdGl2ZSIsIiQiLCJ2YWwiLCJzcGxpdCIsInJhdGVkIiwicGxheWVyc09iaiIsImdhbWVTdGF0ZXMiLCJyYW5rZWQiLCJmaWx0ZXIiLCJwIiwicmFuayIsImRsIiwiaW5pdGlhbGl6ZSIsImRvY3VtZW50cyIsIndpbmRvdyIsImRvY3VtZW50IiwiU1ZHU291cmNlcyIsImlmcmFtZXMiLCJxdWVyeVNlbGVjdG9yQWxsIiwib2JqZWN0cyIsImVtcHR5U3ZnIiwiY3JlYXRlRWxlbWVudE5TIiwicHJlZml4IiwiYm9keSIsImFwcGVuZENoaWxkIiwiZW1wdHlTdmdEZWNsYXJhdGlvbkNvbXB1dGVkIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImVsIiwiY29udGVudERvY3VtZW50IiwiZXJyIiwiZG9jIiwibmV3U291cmNlcyIsImdldFNvdXJjZXMiLCJjcmVhdGVQb3BvdmVyIiwiZG93bmxvYWQiLCJzb3VyY2VzIiwiY2xlYW51cCIsInMxIiwiczIiLCJhYnMiLCJidXR0b25zQ29udGFpbmVyIiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZSIsImJhY2tncm91bmQiLCJidXR0b25XcmFwcGVyIiwic2Nyb2xsVG9wIiwic2Nyb2xsTGVmdCIsInRleHRDb250ZW50IiwiYnV0dG9uIiwib25jbGljayIsImNyb3diYXJFbGVtZW50cyIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInN2Z0luZm8iLCJzdmdzIiwicmVtb3ZlQXR0cmlidXRlIiwiaGFzQXR0cmlidXRlTlMiLCJ4bWxucyIsInNldEF0dHJpYnV0ZU5TIiwieGxpbmsiLCJzZXRJbmxpbmVTdHlsZXMiLCJzb3VyY2UiLCJYTUxTZXJpYWxpemVyIiwic2VyaWFsaXplVG9TdHJpbmciLCJyZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiY2xhc3MiLCJnZXRBdHRyaWJ1dGUiLCJjaGlsZEVsZW1lbnRDb3VudCIsImRvY3R5cGUiLCJmaWxlbmFtZSIsInRpdGxlIiwicmVwbGFjZSIsInRvTG93ZXJDYXNlIiwidXJsIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwiQmxvYiIsInR5cGUiLCJjbGljayIsInNldFRpbWVvdXQiLCJyZXZva2VPYmplY3RVUkwiLCJleHBsaWNpdGx5U2V0U3R5bGUiLCJlbGVtZW50IiwibGVuIiwia2V5IiwidmFsdWUiLCJjU1NTdHlsZURlY2xhcmF0aW9uQ29tcHV0ZWQiLCJjb21wdXRlZFN0eWxlU3RyIiwiZ2V0UHJvcGVydHlWYWx1ZSIsInRyYXZlcnNlIiwib2JqIiwidmlzaXQiLCJub2RlIiwiaGFzQ2hpbGROb2RlcyIsImNoaWxkIiwiZmlyc3RDaGlsZCIsIm5vZGVUeXBlIiwibm9kZU5hbWUiLCJ0cmVlIiwibmV4dFNpYmxpbmciLCJhbGxFbGVtZW50cyIsIndlYmtpdFVSTCIsImFkZFN0YXRzIiwiZ3JhcGgiLCJ0b2dnbGVXaW5zdG9uIiwiYWRkV2luc3RvblN0YXRzIiwic3RyaW5nIiwiam9pbiIsInJlcyIsImRlbGV0ZVdpbnN0b24iLCJ0b2dnbGVNYXJpb3RhIiwiYWRkTWFyaW90YVN0YXRzIiwiZGVsZXRlTWFyaW90YSIsImRyYXdHcmFwaCIsInNlbGVjdGVkIiwicmFua2luZ3MiLCJjb2xvck1hcCIsInBhcnNlIiwiY29sb3JzIiwiY29udHJvbHMiLCJib3JkZXIiLCJib3JkZXItY29sb3IiLCJwcmltYXJ5IiwiaHRtbCIsIm9uIiwic2Vjb25kYXJ5IiwiYmFja2dyb3VuZC1jb2xvciIsImNvbnRyb2wiLCJzZWxlY3RlZFAiLCJnZGF0YSIsImVhY2giLCJzdHJva2Utd2lkdGgiLCJzdHJva2UiLCJ6LWluZGV4IiwiY29uZmlnIiwiJHN0YXRlUHJvdmlkZXIiLCJzZWFyY2hTdmMiLCJzdGF0ZSIsInRlbXBsYXRlVXJsIiwicmVzb2x2ZSIsIm1ldGhvZCIsInJ1biIsIiRzdGF0ZSIsImdvIl0sIm1hcHBpbmdzIjoiQUFDQUEsUUFBQUMsT0FBQSxXQUFBLGNDREFELFFBQUFDLE9BQUEsV0FDQUMsUUFBQSxVQUFBLFFBQUEsU0FBQUMsR0FDQUMsS0FBQUMsSUFBQSxTQUFBQyxHQUNBLE1BQUFILEdBQUFJLElBQUEsa0JBQUFELElBRUFGLEtBQUFJLE9BQUEsU0FBQUYsR0FDQSxNQUFBSCxHQUFBSSxJQUFBLHFCQUFBRCxJQUVBRixLQUFBSyxLQUFBLFdBQ0EsTUFBQU4sR0FBQUksSUFBQSxrQkNUQVAsUUFBQUMsT0FBQSxXQUNBUyxXQUFBLFlBQUEsU0FBQSxTQUFBLGFBQUEsU0FBQUMsRUFBQUMsRUFBQUMsR0EyVUEsUUFBQUMsR0FBQUMsR0FDQUMsRUFBQUMsUUFBQU4sRUFBQU8sUUFBQSxTQUFBQyxHQVFBLFFBQUFDLEdBQUFELEdBQ0EsR0FDQUUsR0FEQUMsSUFFQU4sR0FBQUMsUUFBQUUsRUFBQUksTUFBQSxTQUFBQyxFQUFBQyxHQUNBLElBQUFKLEdBQUEsR0FBQUcsRUFBQUUsR0FBQUYsRUFBQUcsYUFhQSxHQVpBTixHQUNBTyxhQUFBLEVBQ0FDLFlBQUEsRUFDQUMsV0FBQSxFQUNBSCxZQUFBLEVBQ0FJLFlBQUEsR0FFQSxNQUFBUCxFQUFBSSxlQUFBUCxFQUFBTyxjQUFBSixFQUFBSSxjQUNBLE1BQUFKLEVBQUFLLGNBQUFSLEVBQUFRLGFBQUFMLEVBQUFLLGFBQ0EsTUFBQUwsRUFBQU0sYUFBQVQsRUFBQVMsWUFBQU4sRUFBQU0sWUFDQSxNQUFBTixF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TixXQUVBSyxFQUFBVyxLQUFBLFNBQUE3TixHQUNBQSxFQUFBZ0QsT0FBQTJLLEdBQUEzTixFQUFBNk0sU0FDQXRMLEdBQUFjLE9BQUFwRSxNQUFBbUYsT0FDQWdLLGVBQUEsU0FBQXBOLEdBQ0EsTUFBQStNLEdBQUEvTSxFQUFBZ0QsTUFBQXdLLFdBRUFDLG1CQUFBLFNBQUF6TixHQUNBLE1BQUErTSxHQUFBL00sRUFBQWdELE1BQUFxSyxXQUVBMUssVUFBQSxPQUFBUyxNQUFBLFFBQUEsY0FFQTdCLEdBQUFjLE9BQUFwRSxNQUFBbUYsT0FDQWdLLGVBQUEsU0FBQXBOLEdBQ0EsTUFBQStNLEdBQUEvTSxFQUFBZ0QsTUFBQXFLLFNBRUFJLG1CQUFBLFVBQ0E5SyxVQUFBLE9BQUFTLE1BQUEsUUFBQSxXQUdBVixFQUFBbUwsS0FBQSxTQUFBN04sR0FDQUEsRUFBQTZNLFNBQ0F0TCxHQUFBYyxPQUFBcEUsTUFBQW1GLE9BQ0EwSyxlQUFBLE1BQ0FDLE9BQUEsU0FBQS9OLEdBQ0EsTUFBQStNLEdBQUEvTSxFQUFBZ0QsTUFBQXFLLFNBRUFXLFVBQUEsT0FHQXpNLEdBQUFjLE9BQUFwRSxNQUFBbUYsT0FDQTBLLGVBQUEsTUFDQUMsT0FBQSxZQUNBQyxVQUFBLGNDcE9BblEsUUFBQUMsT0FBQSxXQUNBbVEsUUFBQSxpQkFBQSxTQUFBQyxFQUFBQyxHQUVBRCxFQUFBRSxNQUFBLFFBQ0FoRSxJQUFBLElBQ0FpRSxZQUFBLG1CQUNBOVAsV0FBQSxVQUNBK1AsU0FDQTVQLFlBQUEsUUFBQSxTQUFBVixHQUNBLE1BQUFBLElBQUF1USxPQUFBLE1BQUFuRSxJQUFBLHVCQXNCQW9FLEtBQUEsU0FBQSxTQUFBQyxHQUVBQSxFQUFBQyxHQUFBIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIFRoaXMgbmVlZHMgdG8gYmUgbG9hZGVkIGZpcnN0IGJlY2F1c2UgaXQgZGVmaW5lcyB0aGUgZGVwZW5kZW5jaWVzLiBUaGUgZ3VscCB0YXNrIHdpbGwgYWx3YXlzIGNvbmNhdCB0aGlzIHRvIHRoZSB0b3Agb2YgZmlsZVxuYW5ndWxhci5tb2R1bGUoJ3dpbnN0b24nLCBbJ3VpLnJvdXRlciddKTsiLCJhbmd1bGFyLm1vZHVsZSgnd2luc3RvbicpXG4uc2VydmljZSgnYXBpU1ZDJywgZnVuY3Rpb24oJGh0dHApIHtcbiAgICAgICAgdGhpcy5hZGQgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3N0YXRzL2FkZD8nICsgcGFyYW1zKVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnJlbW92ZSA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgICAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvc3RhdHMvcmVtb3ZlPycgKyBwYXJhbXMpXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9zdGF0cycpXG4gICAgICAgIH07XG4gICAgfSk7IiwiYW5ndWxhci5tb2R1bGUoJ3dpbnN0b24nKVxuICAgIC5jb250cm9sbGVyKCdtYWluQ1RSTCcsZnVuY3Rpb24oJHNjb3BlLGFwaVNWQyxwcmVsb2FkT2JqKXtcbiAgICAgICAgJHNjb3BlLl9zaG93SW5wdXQgPSBmYWxzZTtcbiAgICAgICAgJHNjb3BlLl9zaG93SW5wdXRNID0gZmFsc2U7XG4gICAgICAgIHZhciBUYWJsZUhlYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBrZXk6ICd3ZWVrJyxcbiAgICAgICAgICAgICAgICAgICAgdmFsOiBudWxsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGtleTogJ2RhdGUnLFxuICAgICAgICAgICAgICAgICAgICB2YWw6IG51bGxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAga2V5OiAnZycsXG4gICAgICAgICAgICAgICAgICAgIHZhbDogbnVsbFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBrZXk6ICdncycsXG4gICAgICAgICAgICAgICAgICAgIHZhbDogbnVsbFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBrZXk6ICdwYXNzX2NvbXAnLFxuICAgICAgICAgICAgICAgICAgICB2YWw6IG51bGxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAga2V5OiAncGFzc19hdHQnLFxuICAgICAgICAgICAgICAgICAgICB2YWw6IG51bGxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAga2V5OiAncGFzc19wY3QnLFxuICAgICAgICAgICAgICAgICAgICB2YWw6IG51bGxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAga2V5OiAncGFzc195ZHMnLFxuICAgICAgICAgICAgICAgICAgICB2YWw6IG51bGxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAga2V5OiAncGFzc19hdmcnLFxuICAgICAgICAgICAgICAgICAgICB2YWw6IG51bGxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAga2V5OiAncGFzc190ZCcsXG4gICAgICAgICAgICAgICAgICAgIHZhbDogbnVsbFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBrZXk6ICdwYXNzX2ludCcsXG4gICAgICAgICAgICAgICAgICAgIHZhbDogbnVsbFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBrZXk6ICdwYXNzX3NjaycsXG4gICAgICAgICAgICAgICAgICAgIHZhbDogbnVsbFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBrZXk6ICdwYXNzX3Nja3knLFxuICAgICAgICAgICAgICAgICAgICB2YWw6IG51bGxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAga2V5OiAncGFzc19yYXRlJyxcbiAgICAgICAgICAgICAgICAgICAgdmFsOiBudWxsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGtleTogJ3J1c2hfYXR0JyxcbiAgICAgICAgICAgICAgICAgICAgdmFsOiBudWxsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGtleTogJ3J1c2hfeWRzJyxcbiAgICAgICAgICAgICAgICAgICAgdmFsOiBudWxsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGtleTogJ3J1c2hfYXZnJyxcbiAgICAgICAgICAgICAgICAgICAgdmFsOiBudWxsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGtleTogJ3J1c2hfdGQnLFxuICAgICAgICAgICAgICAgICAgICB2YWw6IG51bGxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAga2V5OiAnZnVtJyxcbiAgICAgICAgICAgICAgICAgICAgdmFsOiBudWxsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGtleTogJ2Z1bV9sb3N0JyxcbiAgICAgICAgICAgICAgICAgICAgdmFsOiBudWxsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIFVwZGF0ZUhlYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBrZXk6ICdkYXRlJyxcbiAgICAgICAgICAgICAgICAgICAgdmFsOiBudWxsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGtleTogJ2cnLFxuICAgICAgICAgICAgICAgICAgICB2YWw6IG51bGxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAga2V5OiAnZ3MnLFxuICAgICAgICAgICAgICAgICAgICB2YWw6IG51bGxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAga2V5OiAncGFzc19jb21wJyxcbiAgICAgICAgICAgICAgICAgICAgdmFsOiBudWxsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGtleTogJ3Bhc3NfYXR0JyxcbiAgICAgICAgICAgICAgICAgICAgdmFsOiBudWxsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGtleTogJ3Bhc3NfcGN0JyxcbiAgICAgICAgICAgICAgICAgICAgdmFsOiBudWxsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGtleTogJ3Bhc3NfeWRzJyxcbiAgICAgICAgICAgICAgICAgICAgdmFsOiBudWxsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGtleTogJ3Bhc3NfYXZnJyxcbiAgICAgICAgICAgICAgICAgICAgdmFsOiBudWxsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGtleTogJ3Bhc3NfdGQnLFxuICAgICAgICAgICAgICAgICAgICB2YWw6IG51bGxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAga2V5OiAncGFzc19pbnQnLFxuICAgICAgICAgICAgICAgICAgICB2YWw6IG51bGxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAga2V5OiAncGFzc19zY2snLFxuICAgICAgICAgICAgICAgICAgICB2YWw6IG51bGxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAga2V5OiAncGFzc19zY2t5JyxcbiAgICAgICAgICAgICAgICAgICAgdmFsOiBudWxsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGtleTogJ3Bhc3NfcmF0ZScsXG4gICAgICAgICAgICAgICAgICAgIHZhbDogbnVsbFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBrZXk6ICdydXNoX2F0dCcsXG4gICAgICAgICAgICAgICAgICAgIHZhbDogbnVsbFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBrZXk6ICdydXNoX3lkcycsXG4gICAgICAgICAgICAgICAgICAgIHZhbDogbnVsbFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBrZXk6ICdydXNoX2F2ZycsXG4gICAgICAgICAgICAgICAgICAgIHZhbDogbnVsbFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBrZXk6ICdydXNoX3RkJyxcbiAgICAgICAgICAgICAgICAgICAgdmFsOiBudWxsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGtleTogJ2Z1bScsXG4gICAgICAgICAgICAgICAgICAgIHZhbDogbnVsbFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBrZXk6ICdmdW1fbG9zdCcsXG4gICAgICAgICAgICAgICAgICAgIHZhbDogbnVsbFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF07XG4gICAgICAgIH07XG4gICAgICAgIGlmIChwcmVsb2FkT2JqLmRhdGEuc3RhdHVzID09ICdlcnInKSBjb25zb2xlLmxvZyhwcmVsb2FkT2JqLmRhdGEubWVzc2FnZSk7XG4gICAgICAgICRzY29wZS5nYW1lU3RhdHMgPSBwcmVsb2FkT2JqLmRhdGEuZGF0YS53aW5zdG9uO1xuICAgICAgICAkc2NvcGUubUdhbWVTdGF0cyA9IHByZWxvYWRPYmouZGF0YS5kYXRhLm1hcmlvdGE7XG4gICAgICAgICRzY29wZS5zdGF0cyA9IG5ldyBzdGF0cygpO1xuICAgICAgICAkc2NvcGUuVXN0YXRzID0gbmV3IFVzdGF0cygpO1xuICAgICAgICAkc2NvcGUuTXN0YXRzID0gbmV3IFVzdGF0cygpO1xuICAgICAgICAkc2NvcGUubmV3U3RhdHMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGFwaVNWQy5hZGROZXcoJHNjb3BlLlVzdGF0cykuc3VjY2VzcyhmdW5jdGlvbihyZXN1bHQpe1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuc3RhdHVzID09IFwic3VjY2Vzc1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5Vc3RhdHMgPSBuZXcgVXN0YXRzKCk7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS50b2dnbGVJbnB1dCgpO1xuICAgICAgICAgICAgICAgICAgICBhcGlTVkMubG9hZCgpLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmdhbWVTdGF0cyA9IGRhdGEuZGF0YS53aW5zdG9uO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzdWx0Lm1lc3NhZ2UuY29uc3RyYWludCA9PSAnZ2FtZV9waycpIHtcbiAgICAgICAgICAgICAgICAgICAgYWxlcnQoXCJFcnJvcjogVGhhdCBnYW1lIGFscmVhZHkgZXhpc3RzIGluIHRoZSBkYXRhYmFzZS4gRGVsZXRlIGl0IGZpcnN0IGlmIHlvdSB3YW50IHRvIHVwZGF0ZSBpdFwiKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYWxlcnQoXCJFcnJvcjogXCIgKyBKU09OLnN0cmluZ2lmeShyZXN1bHQubWVzc2FnZS5kZXRhaWwpKVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgICRzY29wZS5uZXdTdGF0c00gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGFwaVNWQy5hZGROZXdNKCRzY29wZS5Nc3RhdHMpLnN1Y2Nlc3MoZnVuY3Rpb24ocmVzdWx0KXtcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnN0YXR1cyA9PSBcInN1Y2Nlc3NcIikge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuTXN0YXRzID0gbmV3IFVzdGF0cygpO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUudG9nZ2xlSW5wdXRNKCk7XG4gICAgICAgICAgICAgICAgICAgIGFwaVNWQy5sb2FkKCkuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubUdhbWVTdGF0cyA9IGRhdGEuZGF0YS5tYXJpb3RhO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzdWx0Lm1lc3NhZ2UuY29uc3RyYWludCA9PSAnZ2FtZV9waycpIHtcbiAgICAgICAgICAgICAgICAgICAgYWxlcnQoXCJFcnJvcjogVGhhdCBnYW1lIGFscmVhZHkgZXhpc3RzIGluIHRoZSBkYXRhYmFzZS4gRGVsZXRlIGl0IGZpcnN0IGlmIHlvdSB3YW50IHRvIHVwZGF0ZSBpdFwiKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYWxlcnQoXCJFcnJvcjogXCIgKyBKU09OLnN0cmluZ2lmeShyZXN1bHQubWVzc2FnZS5kZXRhaWwpKVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgICRzY29wZS50b2dnbGVJbnB1dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJHNjb3BlLl9zaG93SW5wdXQgPSAhJHNjb3BlLl9zaG93SW5wdXQ7XG4gICAgICAgIH07XG4gICAgICAgICRzY29wZS50b2dnbGVJbnB1dE0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICRzY29wZS5fc2hvd0lucHV0TSA9ICEkc2NvcGUuX3Nob3dJbnB1dE07XG4gICAgICAgIH07XG4gICAgICAgICRzY29wZS5kZWxldGVSb3dNID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoJHNjb3BlLm1HYW1lU3RhdHMgIT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBhcGlTVkMucmVtb3ZlTSgpLnN1Y2Nlc3MoZnVuY3Rpb24ocmVzcG9uc2Upe1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09ICdzdWNjZXNzJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXBpU1ZDLmxvYWQoKS5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubUdhbWVTdGF0cyA9IGRhdGEuZGF0YS5tYXJpb3RhO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgICRzY29wZS5kZWxldGVSb3cgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICgkc2NvcGUuZ2FtZVN0YXRzICE9IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgYXBpU1ZDLnJlbW92ZSgpLnN1Y2Nlc3MoZnVuY3Rpb24ocmVzcG9uc2Upe1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09ICdzdWNjZXNzJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXBpU1ZDLmxvYWQoKS5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZ2FtZVN0YXRzID0gZGF0YS5kYXRhLndpbnN0b247XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgJHNjb3BlLm1heEdhbWVzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgbWF4ID0gMDtcbiAgICAgICAgICAgIF8uZm9yRWFjaCgkc2NvcGUucGxheWVycywgZnVuY3Rpb24ocGxheWVyKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBsYXllci5nYW1lcy5sZW5ndGggPiBtYXgpIG1heCA9IHBsYXllci5nYW1lcy5sZW5ndGg7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHZhciB3ZWVrcyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBtYXggKyAxOyBpKyspIHtcbiAgICAgICAgICAgICAgICB3ZWVrcy5wdXNoKGkpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gd2Vla3M7XG4gICAgICAgIH07XG4gICAgICAgICRzY29wZS5wbGF5ZXJzID0gcHJlbG9hZE9iai5kYXRhLmRhdGEucGxheWVycztcbiAgICAgICAgJHNjb3BlLmdhbWVzID0gcHJlbG9hZE9iai5kYXRhLmRhdGEuZ2FtZXM7XG4gICAgICAgIF8uZm9yRWFjaCgkc2NvcGUucGxheWVycywgZnVuY3Rpb24ocGxheWVyKSB7XG4gICAgICAgICAgICBwbGF5ZXIuZ2FtZXMgPSBbXTtcbiAgICAgICAgICAgIF8uZm9yRWFjaCgkc2NvcGUuZ2FtZXMsIGZ1bmN0aW9uKGdhbWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoZ2FtZS5wbGF5ZXIgPT09IHBsYXllci5pZCkgcGxheWVyLmdhbWVzLnB1c2goZ2FtZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBhY2N1bXVsYXRlU3RhdHMgPSBmdW5jdGlvbihwbGF5ZXIsIHdlZWspIHtcbiAgICAgICAgICAgIHZhciBnYW1lcyA9IF8udGFrZShwbGF5ZXIuZ2FtZXMsIHdlZWspO1xuICAgICAgICAgICAgdmFyIHN0YXRzQ3VtID0ge1xuICAgICAgICAgICAgICAgIHBhc3NpbmdfY29tcDowLFxuICAgICAgICAgICAgICAgIHBhc3NpbmdfeWRzOiAwLFxuICAgICAgICAgICAgICAgIHBhc3NpbmdfdGQ6IDAsXG4gICAgICAgICAgICAgICAgcGFzc2luZ19hdHQ6IDAsXG4gICAgICAgICAgICAgICAgcGFzc2luZ19pbnQ6IDBcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBfLmZvckVhY2goZ2FtZXMsZnVuY3Rpb24oZ2FtZSkge1xuICAgICAgICAgICAgICAgIGlmIChnYW1lLnBhc3NpbmdfY29tcCAhPSBudWxsKSBzdGF0c0N1bS5wYXNzaW5nX2NvbXAgKz0gZ2FtZS5wYXNzaW5nX2NvbXA7XG4gICAgICAgICAgICAgICAgaWYgKGdhbWUucGFzc2luZ195ZHMgIT0gbnVsbCkgc3RhdHNDdW0ucGFzc2luZ195ZHMgKz0gZ2FtZS5wYXNzaW5nX3lkcztcbiAgICAgICAgICAgICAgICBpZiAoZ2FtZS5wYXNzaW5nX3RkICE9IG51bGwpIHN0YXRzQ3VtLnBhc3NpbmdfdGQgKz0gZ2FtZS5wYXNzaW5nX3RkO1xuICAgICAgICAgICAgICAgIGlmIChnYW1lLnBhc3NpbmdfYXR0ICE9IG51bGwpIHN0YXRzQ3VtLnBhc3NpbmdfYXR0ICs9IGdhbWUucGFzc2luZ19hdHQ7XG4gICAgICAgICAgICAgICAgaWYgKGdhbWUucGFzc2luZ19pbnQgIT0gbnVsbCkgc3RhdHNDdW0ucGFzc2luZ19pbnQgKz0gZ2FtZS5wYXNzaW5nX2ludDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZnVuY3Rpb24gcmF0ZShzdGF0cykge1xuICAgICAgICAgICAgICAgIGlmIChzdGF0cy5wYXNzaW5nX2F0dCAhPSBudWxsICYmIHN0YXRzLnBhc3NpbmdfYXR0ICE9IDApIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZm9ybXVsYSBmcm9tIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1Bhc3Nlcl9yYXRpbmdcbiAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSAoc3RhdHNDdW0ucGFzc2luZ19jb21wIC8gc3RhdHNDdW0ucGFzc2luZ19hdHQgLSAuMykgKiA1O1xuICAgICAgICAgICAgICAgICAgICB2YXIgYiA9IChzdGF0c0N1bS5wYXNzaW5nX3lkcyAvIHN0YXRzQ3VtLnBhc3NpbmdfYXR0IC0gMykgKiAuMjU7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjID0gKHN0YXRzQ3VtLnBhc3NpbmdfdGQgLyBzdGF0c0N1bS5wYXNzaW5nX2F0dCkgKiAyMDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGQgPSAyLjM3NSAtIChzdGF0c0N1bS5wYXNzaW5nX2ludCAvIHN0YXRzQ3VtLnBhc3NpbmdfYXR0ICogMjUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYSA+IDIuMzc1KSBhID0gMi4zNzU7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhIDwgMCkgYSA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGlmIChiID4gMi4zNzUpIGIgPSAyLjM3NTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGIgPCAwKSBiID0gMDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGMgPiAyLjM3NSkgYyA9IDIuMzc1O1xuICAgICAgICAgICAgICAgICAgICBpZiAoYyA8IDApIGMgPSAwO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZCA+IDIuMzc1KSBkID0gMi4zNzU7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkIDwgMCkgZCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoYSArIGIgKyBjICsgZCkgLyA2ICogMTAwO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGxheWVyLnJhdGluZyA9IHJhdGUoc3RhdHNDdW0pO1xuICAgICAgICAgICAgcmV0dXJuIHBsYXllcjtcbiAgICAgICAgfTtcbiAgICAgICAgJHNjb3BlLnJhdGVQbGF5ZXJzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkc2NvcGUuY2hhcnRBY3RpdmUgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIHdlZWsgPSAkKCcjd2VlazJyYXRlJykudmFsKCkuc3BsaXQoJyAnKVsxXTtcbiAgICAgICAgICAgIHZhciByYXRlZCA9IFtdO1xuICAgICAgICAgICAgJHNjb3BlLnJhdGVkID0gW107XG4gICAgICAgICAgICBhcGlTVkMubG9hZCgpLnN1Y2Nlc3MoZnVuY3Rpb24ocGxheWVyc09iaikge1xuICAgICAgICAgICAgICAgICRzY29wZS5wbGF5ZXJzID0gcGxheWVyc09iai5kYXRhLnBsYXllcnM7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmdhbWVzID0gcGxheWVyc09iai5kYXRhLmdhbWVzO1xuICAgICAgICAgICAgICAgICRzY29wZS5nYW1lU3RhdGVzID0gcGxheWVyc09iai5kYXRhLndpbnN0b247XG4gICAgICAgICAgICAgICAgXy5mb3JFYWNoKCRzY29wZS5wbGF5ZXJzLCBmdW5jdGlvbihwbGF5ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgcGxheWVyLmdhbWVzID0gW107XG4gICAgICAgICAgICAgICAgICAgIF8uZm9yRWFjaCgkc2NvcGUuZ2FtZXMsIGZ1bmN0aW9uKGdhbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChnYW1lLnBsYXllciA9PT0gcGxheWVyLmlkKSBwbGF5ZXIuZ2FtZXMucHVzaChnYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIF8uc29ydEJ5KHBsYXllci5nYW1lcywgZnVuY3Rpb24oZ2FtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdhbWUud2VlaztcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgXy5mb3JFYWNoKCRzY29wZS5wbGF5ZXJzLCBmdW5jdGlvbihwbGF5ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgYWNjdW11bGF0ZVN0YXRzKHBsYXllcix3ZWVrKTtcbiAgICAgICAgICAgICAgICAgICAgcmF0ZWQucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBcInBsYXllclwiOnBsYXllci5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJyYXRpbmdcIjpNYXRoLnJvdW5kKChwbGF5ZXIucmF0aW5nICsgMC4wMDAwMSkgKiAxMDApIC8gMTAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJpZFwiOlwicFwiK3BsYXllci5pZFxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHZhciByYW5rZWQgPSBfLnNvcnRCeShyYXRlZCwgZnVuY3Rpb24ocGxheWVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwbGF5ZXIucmF0aW5nO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJhbmtlZCA9IF8uZmlsdGVyKHJhbmtlZCwgZnVuY3Rpb24ocCl7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwLnJhdGluZztcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBfLmZvckVhY2gocmFua2VkLnJldmVyc2UoKSxmdW5jdGlvbihwbGF5ZXIsIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIHBsYXllci5yYW5rID0gaW5kZXggKyAxO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUucmF0ZWQucHVzaChwbGF5ZXIpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGRyYXdHcmFwaGljcyh3ZWVrKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBmdW5jdGlvbiBkcmF3R3JhcGhpY3Mod2Vlaykge1xuICAgICAgICAgICAgXy5mb3JFYWNoKCRzY29wZS5wbGF5ZXJzLCBmdW5jdGlvbihwbGF5ZXIpIHtcbiAgICAgICAgICAgICAgICBwbGF5ZXIuZ2FtZXMgPSBbXTtcbiAgICAgICAgICAgICAgICBfLmZvckVhY2goJHNjb3BlLmdhbWVzLCBmdW5jdGlvbihnYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChnYW1lLnBsYXllciA9PSBwbGF5ZXIuaWQpIHBsYXllci5nYW1lcy5wdXNoKGdhbWUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIF8uc29ydEJ5KHBsYXllci5nYW1lcywgZnVuY3Rpb24oZ2FtZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2FtZS53ZWVrO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGdldFJhdGluZ3MocGxheWVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByYXRpbmdzID0gW107XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdGF0c0N1bTtcbiAgICAgICAgICAgICAgICAgICAgXy5mb3JFYWNoKHBsYXllci5nYW1lcyxmdW5jdGlvbihnYW1lLGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXN0YXRzQ3VtICYmIGdhbWUuZyA9PSAxICYmIGdhbWUucGFzc2luZ19hdHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0c0N1bSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFzc2luZ19jb21wOjAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhc3NpbmdfeWRzOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXNzaW5nX3RkOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXNzaW5nX2F0dDogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFzc2luZ19pbnQ6IDBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChnYW1lLnBhc3NpbmdfY29tcCAhPSBudWxsKSBzdGF0c0N1bS5wYXNzaW5nX2NvbXAgKz0gZ2FtZS5wYXNzaW5nX2NvbXA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdhbWUucGFzc2luZ195ZHMgIT0gbnVsbCkgc3RhdHNDdW0ucGFzc2luZ195ZHMgKz0gZ2FtZS5wYXNzaW5nX3lkcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ2FtZS5wYXNzaW5nX3RkICE9IG51bGwpIHN0YXRzQ3VtLnBhc3NpbmdfdGQgKz0gZ2FtZS5wYXNzaW5nX3RkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChnYW1lLnBhc3NpbmdfYXR0ICE9IG51bGwpIHN0YXRzQ3VtLnBhc3NpbmdfYXR0ICs9IGdhbWUucGFzc2luZ19hdHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdhbWUucGFzc2luZ19pbnQgIT0gbnVsbCkgc3RhdHNDdW0ucGFzc2luZ19pbnQgKz0gZ2FtZS5wYXNzaW5nX2ludDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdHNDdW0ucGFzc2luZ19hdHQgIT0gbnVsbCAmJiBzdGF0c0N1bS5wYXNzaW5nX2F0dCAhPSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZvcm11bGEgZnJvbSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9QYXNzZXJfcmF0aW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhID0gKHN0YXRzQ3VtLnBhc3NpbmdfY29tcCAvIHN0YXRzQ3VtLnBhc3NpbmdfYXR0IC0gLjMpICogNTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGIgPSAoc3RhdHNDdW0ucGFzc2luZ195ZHMgLyBzdGF0c0N1bS5wYXNzaW5nX2F0dCAtIDMpICogLjI1O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYyA9IChzdGF0c0N1bS5wYXNzaW5nX3RkIC8gc3RhdHNDdW0ucGFzc2luZ19hdHQpICogMjA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkID0gMi4zNzUgLSAoc3RhdHNDdW0ucGFzc2luZ19pbnQgLyBzdGF0c0N1bS5wYXNzaW5nX2F0dCAqIDI1KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGEgPiAyLjM3NSkgYSA9IDIuMzc1O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYSA8IDApIGEgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYiA+IDIuMzc1KSBiID0gMi4zNzU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChiIDwgMCkgYiA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjID4gMi4zNzUpIGMgPSAyLjM3NTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGMgPCAwKSBjID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGQgPiAyLjM3NSkgZCA9IDIuMzc1O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZCA8IDApIGQgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmF0aW5nID0gKGErYitjK2QpLzYqMTAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXRpbmdzLnB1c2goe1wid2Vla1wiOmluZGV4ICsgMSwgXCJyYXRpbmdcIjpNYXRoLnJvdW5kKChyYXRpbmcgKyAwLjAwMDAxKSAqIDEwMCkgLyAxMDAsXCJwaWRcIjpwbGF5ZXIuaWR9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIXN0YXRzQ3VtICYmICFnYW1lLmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXRpbmdzLnB1c2goe1wid2Vla1wiOmluZGV4ICsgMSxcInJhdGluZ1wiOm51bGwsXCJwaWRcIjpwbGF5ZXIuaWR9KVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghc3RhdHNDdW0gJiYgZ2FtZS5nID09IDEgJiYgIWdhbWUucGFzc2luZ19hdHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgeCA9IHJhdGluZ3NbcmF0aW5ncy5sZW5ndGggLTFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB5ID0ge1wid2Vla1wiOiB4LndlZWsgKyAxLFwicmF0aW5nXCI6IHgucmF0aW5nLFwicGlkXCI6cGxheWVyLmlkfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXRpbmdzLnB1c2goeSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ2FtZS5wYXNzaW5nX2NvbXAgIT0gbnVsbCkgc3RhdHNDdW0ucGFzc2luZ19jb21wICs9IGdhbWUucGFzc2luZ19jb21wO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChnYW1lLnBhc3NpbmdfeWRzICE9IG51bGwpIHN0YXRzQ3VtLnBhc3NpbmdfeWRzICs9IGdhbWUucGFzc2luZ195ZHM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdhbWUucGFzc2luZ190ZCAhPSBudWxsKSBzdGF0c0N1bS5wYXNzaW5nX3RkICs9IGdhbWUucGFzc2luZ190ZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ2FtZS5wYXNzaW5nX2F0dCAhPSBudWxsKSBzdGF0c0N1bS5wYXNzaW5nX2F0dCArPSBnYW1lLnBhc3NpbmdfYXR0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChnYW1lLnBhc3NpbmdfaW50ICE9IG51bGwpIHN0YXRzQ3VtLnBhc3NpbmdfaW50ICs9IGdhbWUucGFzc2luZ19pbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRzQ3VtLnBhc3NpbmdfYXR0ICE9IG51bGwgJiYgc3RhdHNDdW0ucGFzc2luZ19hdHQgIT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBmb3JtdWxhIGZyb20gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvUGFzc2VyX3JhdGluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IChzdGF0c0N1bS5wYXNzaW5nX2NvbXAgLyBzdGF0c0N1bS5wYXNzaW5nX2F0dCAtIC4zKSAqIDU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBiID0gKHN0YXRzQ3VtLnBhc3NpbmdfeWRzIC8gc3RhdHNDdW0ucGFzc2luZ19hdHQgLSAzKSAqIC4yNTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGMgPSAoc3RhdHNDdW0ucGFzc2luZ190ZCAvIHN0YXRzQ3VtLnBhc3NpbmdfYXR0KSAqIDIwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZCA9IDIuMzc1IC0gKHN0YXRzQ3VtLnBhc3NpbmdfaW50IC8gc3RhdHNDdW0ucGFzc2luZ19hdHQgKiAyNSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhID4gMi4zNzUpIGEgPSAyLjM3NTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGEgPCAwKSBhID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGIgPiAyLjM3NSkgYiA9IDIuMzc1O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYiA8IDApIGIgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYyA+IDIuMzc1KSBjID0gMi4zNzU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjIDwgMCkgYyA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkID4gMi4zNzUpIGQgPSAyLjM3NTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGQgPCAwKSBkID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJhdGluZyA9IChhK2IrYytkKS82KjEwMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF0aW5ncy5wdXNoKHtcIndlZWtcIjppbmRleCArIDEsIFwicmF0aW5nXCI6TWF0aC5yb3VuZCgocmF0aW5nICsgMC4wMDAwMSkgKiAxMDApIC8gMTAwLFwicGlkXCI6cGxheWVyLmlkfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmF0aW5nT2JqID0ge307XG4gICAgICAgICAgICAgICAgICAgIF8uZm9yRWFjaChyYXRpbmdzLCBmdW5jdGlvbihyYXRpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhdGluZ09ialtyYXRpbmcud2Vla10gPSByYXRpbmc7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIF8uZm9yRWFjaChyYXRpbmdPYmosIGZ1bmN0aW9uKHJhdGluZyxpKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcmF0aW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgIT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXRpbmcgPSByYXRpbmdPYmpbaS0xXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF0aW5nLndlZWsrK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhdGluZy53ZWVrID0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF0aW5nLnJhdGluZyA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhdGluZy5waWQgPSBwbGF5ZXIuaWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAvL2ZvciAodmFyIGkgPSAxOyBpIDwgMTk7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAvLyAgICBpZiAoIXJhdGluZ09ialtpXSkge1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgaWYgKGkgIT0gMSAmJiByYXRpbmdPYmpbaS0xXSkge1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgIHJhdGluZ09ialtpXSA9IHJhdGluZ09ialtpLTFdO1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgIHJhdGluZ09ialtpXS53ZWVrID0gaTtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgcmF0aW5nT2JqW2ldID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gICAgfVxuICAgICAgICAgICAgICAgICAgICAvL31cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJhdGluZ09iajtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHJhdGluZ3MgPSBfLnZhbHVlcyhnZXRSYXRpbmdzKHBsYXllcikpO1xuICAgICAgICAgICAgICAgIC8vaWYgKCFwbGF5ZXIuaWQgPT0gMSkgd2VlayArPSAzO1xuICAgICAgICAgICAgICAgIHBsYXllci5yYXRpbmdzID0gXy50YWtlKHJhdGluZ3MsIHdlZWspO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBfLmZvckVhY2goJHNjb3BlLnBsYXllcnMsZnVuY3Rpb24ocGxheWVyKSB7XG4gICAgICAgICAgICAgICAgcGxheWVyLmNsYXNzTmFtZSA9ICdvdGhlcic7XG4gICAgICAgICAgICAgICAgaWYgKHBsYXllci5pZCA9PT0gMSkgcGxheWVyLmNsYXNzTmFtZSA9ICdqYW1laXMnO1xuICAgICAgICAgICAgICAgIGlmIChwbGF5ZXIuaWQgPT09IDIpIHBsYXllci5jbGFzc05hbWUgPSAnbWFyY3VzJztcbiAgICAgICAgICAgICAgICBwbGF5ZXIucmF0aW5ncy5mb3JFYWNoKGZ1bmN0aW9uKGQsaSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC53ZWVrID0gK2Qud2VlaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucmF0aW5nID0gZC5yYXRpbmc7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLnBpZCA9IHBsYXllci5pZDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpICE9IDAgJiYgcGxheWVyLnJhdGluZ3NbaV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllci5yYXRpbmdzW2ldID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIndlZWtcIjpwbGF5ZXIucmF0aW5nc1tpXS53ZWVrICsgMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJyYXRpbmdcIjpwbGF5ZXIucmF0aW5nc1tpXS5yYXRpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicGlkXCI6cGxheWVyLmlkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXIucmF0aW5nc1tpXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ3ZWVrXCI6IGkgKyAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInJhdGluZ1wiOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInBpZFwiOiBwbGF5ZXIuaWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gVGhpcyBsb29wIGNhbiBiZSB1c2VkIHRvIGNoZWNrIGlmIGFueSBkaWRuJ3QgZ2V0IHJhdGVkXG4gICAgICAgICAgICAvL18uZm9yRWFjaCgkc2NvcGUucGxheWVycyxmdW5jdGlvbihwbGF5ZXIpIHtcbiAgICAgICAgICAgIC8vICAgIGlmIChwbGF5ZXIucmF0aW5ncy5sZW5ndGggPCBwbGF5ZXIuZ2FtZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAvLyAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwbGF5ZXIucmF0aW5ncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgLy8gICAgICAgICAgICBjb25zb2xlLmxvZyhwbGF5ZXIubmFtZSwgcGxheWVyLnJhdGluZ3NbaV0ud2VlaylcbiAgICAgICAgICAgIC8vICAgICAgICB9XG4gICAgICAgICAgICAvLyAgICB9XG4gICAgICAgICAgICAvL30pO1xuICAgICAgICAgICAgdmFyIG1hcmdpbiA9IHt0b3A6IDIwLCByaWdodDogMjAsIGJvdHRvbTogMzAsIGxlZnQ6IDUwfTtcbiAgICAgICAgICAgIHZhciB3aWR0aCA9IDk2MCAtIG1hcmdpbi5yaWdodCAtIG1hcmdpbi5sZWZ0O1xuICAgICAgICAgICAgdmFyIGhlaWdodCA9IDUwMCAtIG1hcmdpbi50b3AgLSBtYXJnaW4uYm90dG9tO1xuICAgICAgICAgICAgdmFyIHggPSBkMy5zY2FsZS5saW5lYXIoKS5yYW5nZShbMCx3aWR0aF0pO1xuICAgICAgICAgICAgdmFyIHkgPSBkMy5zY2FsZS5saW5lYXIoKS5yYW5nZShbaGVpZ2h0LDBdKTtcbiAgICAgICAgICAgIHZhciB4QXhpcyA9IGQzLnN2Zy5heGlzKCkuc2NhbGUoeCkub3JpZW50KFwiYm90dG9tXCIpLnRpY2tWYWx1ZXMoZDMucmFuZ2UoMSx3ZWVrICsgMSkpLnRpY2tGb3JtYXQoZDMuZm9ybWF0KFwiZFwiKSk7XG4gICAgICAgICAgICB2YXIgeUF4aXMgPSBkMy5zdmcuYXhpcygpLnNjYWxlKHkpLm9yaWVudChcImxlZnRcIik7XG4gICAgICAgICAgICB2YXIgbGluZSA9IGQzLnN2Zy5saW5lKClcbiAgICAgICAgICAgICAgICAueChmdW5jdGlvbihkKSB7IHJldHVybiB4KGQud2Vlayl9KVxuICAgICAgICAgICAgICAgIC55KGZ1bmN0aW9uKGQpIHsgcmV0dXJuIHkoZC5yYXRpbmcpfSlcbiAgICAgICAgICAgICAgICAuaW50ZXJwb2xhdGUoJ2Jhc2lzJyk7XG4gICAgICAgICAgICB2YXIgc3ZnID0gZDMuc2VsZWN0KFwiI2dyYXBoXCIpLnNlbGVjdF9vcl9hcHBlbmQoXCJzdmdcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIHdpZHRoICsgbWFyZ2luLmxlZnQgKyBtYXJnaW4ucmlnaHQpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgaGVpZ2h0ICsgbWFyZ2luLnRvcCArIG1hcmdpbi5ib3R0b20pXG4gICAgICAgICAgICAgICAgLnNlbGVjdF9vcl9hcHBlbmQoXCJnLmNvbnRhaW5lclwiKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsXCJ0cmFuc2xhdGUoXCIgKyBtYXJnaW4ubGVmdCArIFwiLFwiICsgbWFyZ2luLnRvcCArIFwiKVwiKTtcbiAgICAgICAgICAgIHguZG9tYWluKFsxLCBOdW1iZXIod2VlayldKTtcbiAgICAgICAgICAgIHkuZG9tYWluKFswLDE2MF0pO1xuXG4gICAgICAgICAgICB2YXIgbGluZXMgPSBzdmcuc2VsZWN0X29yX2FwcGVuZCgnZy5saW5lcycpLnNlbGVjdEFsbCgncGF0aCcpXG4gICAgICAgICAgICAgICAgLmRhdGEoJHNjb3BlLnBsYXllcnMucmV2ZXJzZSgpLGZ1bmN0aW9uKGQpe2lmKGQpey8qY29uc29sZS5sb2coZCk7Ki9yZXR1cm4gZC5pZDt9fSk7XG5cbiAgICAgICAgICAgIGxpbmVzLmVudGVyKCkuYXBwZW5kKCdwYXRoJylcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIixmdW5jdGlvbihkKSB7IHJldHVybiBkLmNsYXNzTmFtZX0pXG4gICAgICAgICAgICAuYXR0cihcIm5hbWVcIixmdW5jdGlvbihkKXtyZXR1cm4gZC5uYW1lfSlcbiAgICAgICAgICAgIC5hdHRyKFwiZFwiLCBmdW5jdGlvbihkKSB7cmV0dXJuIGxpbmUoZC5yYXRpbmdzKX0pO1xuXG4gICAgICAgICAgICBsaW5lcy5hdHRyKFwiY2xhc3NcIixmdW5jdGlvbihkKSB7IHJldHVybiBkLmNsYXNzTmFtZX0pXG4gICAgICAgICAgICAuYXR0cihcIm5hbWVcIixmdW5jdGlvbihkKXtyZXR1cm4gZC5uYW1lfSlcbiAgICAgICAgICAgIC50cmFuc2l0aW9uKCkuYXR0cihcImRcIiwgZnVuY3Rpb24oZCkge3JldHVybiBsaW5lKGQucmF0aW5ncyl9KTtcblxuICAgICAgICAgICAgbGluZXMuZXhpdCgpLnJlbW92ZSgpO1xuXG4gICAgICAgICAgICBzdmcuc2VsZWN0X29yX2FwcGVuZChcImcueFwiKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ4IGF4aXNcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZSgwLFwiICsgaGVpZ2h0ICsgXCIpXCIpXG4gICAgICAgICAgICAgICAgLmNhbGwoeEF4aXMpXG4gICAgICAgICAgICAgICAgLnNlbGVjdF9vcl9hcHBlbmQoXCJ0ZXh0LnhheGlzXCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ5XCIsMjUpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ4XCIsNDUwKVxuICAgICAgICAgICAgICAgIC5zdHlsZShcInRleHQtYW5jaG9yXCIsXCJlbmRcIilcbiAgICAgICAgICAgICAgICAuc3R5bGUoXCJkeVwiLFwiLjcxZW1cIilcbiAgICAgICAgICAgICAgICAudGV4dChcIldlZWtcIik7XG5cbiAgICAgICAgICAgIHN2Zy5zZWxlY3Rfb3JfYXBwZW5kKFwiZy55XCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInkgYXhpc1wiKVxuICAgICAgICAgICAgICAgIC5jYWxsKHlBeGlzKVxuICAgICAgICAgICAgICAgIC5zZWxlY3Rfb3JfYXBwZW5kKFwidGV4dC55YXhpc1wiKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsXCJyb3RhdGUoLTkwKVwiKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwieVwiLC01MClcbiAgICAgICAgICAgICAgICAuYXR0cihcInhcIiwgLTE1MClcbiAgICAgICAgICAgICAgICAuYXR0cihcImR5XCIsIFwiLjcxZW1cIilcbiAgICAgICAgICAgICAgICAuc3R5bGUoXCJ0ZXh0LWFuY2hvclwiLFwiZW5kXCIpXG4gICAgICAgICAgICAgICAgLnRleHQoXCJRQiBSYXRpbmcgKGN1bXVsYXRpdmUpXCIpO1xuICAgICAgICB9XG4gICAgICAgICRzY29wZS5jaGFydEFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAkc2NvcGUuZGwgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBkb2N0eXBlID0gJzw/eG1sIHZlcnNpb249XCIxLjBcIiBzdGFuZGFsb25lPVwibm9cIj8+PCFET0NUWVBFIHN2ZyBQVUJMSUMgXCItLy9XM0MvL0RURCBTVkcgMS4xLy9FTlwiIFwiaHR0cDovL3d3dy53My5vcmcvR3JhcGhpY3MvU1ZHLzEuMS9EVEQvc3ZnMTEuZHRkXCI+JztcblxuICAgICAgICAgICAgd2luZG93LlVSTCA9ICh3aW5kb3cuVVJMIHx8IHdpbmRvdy53ZWJraXRVUkwpO1xuXG4gICAgICAgICAgICB2YXIgYm9keSA9IGRvY3VtZW50LmJvZHksXG4gICAgICAgICAgICAgICAgZW1wdHlTdmc7XG5cbiAgICAgICAgICAgIHZhciBwcmVmaXggPSB7XG4gICAgICAgICAgICAgICAgeG1sbnM6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC94bWxucy9cIixcbiAgICAgICAgICAgICAgICB4bGluazogXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsXG4gICAgICAgICAgICAgICAgc3ZnOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGluaXRpYWxpemUoKTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gaW5pdGlhbGl6ZSgpIHtcbiAgICAgICAgICAgICAgICB2YXIgZG9jdW1lbnRzID0gW3dpbmRvdy5kb2N1bWVudF0sXG4gICAgICAgICAgICAgICAgICAgIFNWR1NvdXJjZXMgPSBbXTtcbiAgICAgICAgICAgICAgICBpZnJhbWVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcImlmcmFtZVwiKSxcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJvYmplY3RcIik7XG5cbiAgICAgICAgICAgICAgICAvLyBhZGQgZW1wdHkgc3ZnIGVsZW1lbnRcbiAgICAgICAgICAgICAgICB2YXIgZW1wdHlTdmcgPSB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKHByZWZpeC5zdmcsICdzdmcnKTtcbiAgICAgICAgICAgICAgICB3aW5kb3cuZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChlbXB0eVN2Zyk7XG4gICAgICAgICAgICAgICAgdmFyIGVtcHR5U3ZnRGVjbGFyYXRpb25Db21wdXRlZCA9IGdldENvbXB1dGVkU3R5bGUoZW1wdHlTdmcpO1xuXG4gICAgICAgICAgICAgICAgW10uZm9yRWFjaC5jYWxsKGlmcmFtZXMsIGZ1bmN0aW9uKGVsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWwuY29udGVudERvY3VtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnRzLnB1c2goZWwuY29udGVudERvY3VtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIFtdLmZvckVhY2guY2FsbChvYmplY3RzLCBmdW5jdGlvbihlbCkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsLmNvbnRlbnREb2N1bWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50cy5wdXNoKGVsLmNvbnRlbnREb2N1bWVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2goZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGRvY3VtZW50cy5mb3JFYWNoKGZ1bmN0aW9uKGRvYykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbmV3U291cmNlcyA9IGdldFNvdXJjZXMoZG9jLCBlbXB0eVN2Z0RlY2xhcmF0aW9uQ29tcHV0ZWQpO1xuICAgICAgICAgICAgICAgICAgICAvLyBiZWNhdXNlIG9mIHByb3RvdHlwZSBvbiBOWVQgcGFnZXNcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuZXdTb3VyY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBTVkdTb3VyY2VzLnB1c2gobmV3U291cmNlc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAoU1ZHU291cmNlcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZVBvcG92ZXIoU1ZHU291cmNlcyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChTVkdTb3VyY2VzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZG93bmxvYWQoU1ZHU291cmNlc1swXSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYWxlcnQoXCJUaGUgQ3Jvd2JhciBjb3VsZG7igJl0IGZpbmQgYW55IFNWRyBub2Rlcy5cIik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNyZWF0ZVBvcG92ZXIoc291cmNlcykge1xuICAgICAgICAgICAgICAgIGNsZWFudXAoKTtcblxuICAgICAgICAgICAgICAgIHNvdXJjZXMuZm9yRWFjaChmdW5jdGlvbihzMSkge1xuICAgICAgICAgICAgICAgICAgICBzb3VyY2VzLmZvckVhY2goZnVuY3Rpb24oczIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzMSAhPT0gczIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoKE1hdGguYWJzKHMxLnRvcCAtIHMyLnRvcCkgPCAzOCkgJiYgKE1hdGguYWJzKHMxLmxlZnQgLSBzMi5sZWZ0KSA8IDM4KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMi50b3AgKz0gMzg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMyLmxlZnQgKz0gMzg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHZhciBidXR0b25zQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgICAgICBib2R5LmFwcGVuZENoaWxkKGJ1dHRvbnNDb250YWluZXIpO1xuXG4gICAgICAgICAgICAgICAgYnV0dG9uc0NvbnRhaW5lci5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcInN2Zy1jcm93YmFyXCIpO1xuICAgICAgICAgICAgICAgIGJ1dHRvbnNDb250YWluZXIuc3R5bGVbXCJ6LWluZGV4XCJdID0gMWU3O1xuICAgICAgICAgICAgICAgIGJ1dHRvbnNDb250YWluZXIuc3R5bGVbXCJwb3NpdGlvblwiXSA9IFwiYWJzb2x1dGVcIjtcbiAgICAgICAgICAgICAgICBidXR0b25zQ29udGFpbmVyLnN0eWxlW1widG9wXCJdID0gMDtcbiAgICAgICAgICAgICAgICBidXR0b25zQ29udGFpbmVyLnN0eWxlW1wibGVmdFwiXSA9IDA7XG5cblxuXG4gICAgICAgICAgICAgICAgdmFyIGJhY2tncm91bmQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgICAgIGJvZHkuYXBwZW5kQ2hpbGQoYmFja2dyb3VuZCk7XG5cbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwic3ZnLWNyb3diYXJcIik7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZC5zdHlsZVtcImJhY2tncm91bmRcIl0gPSBcInJnYmEoMjU1LCAyNTUsIDI1NSwgMC43KVwiO1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmQuc3R5bGVbXCJwb3NpdGlvblwiXSA9IFwiZml4ZWRcIjtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLnN0eWxlW1wibGVmdFwiXSA9IDA7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZC5zdHlsZVtcInRvcFwiXSA9IDA7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZC5zdHlsZVtcIndpZHRoXCJdID0gXCIxMDAlXCI7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZC5zdHlsZVtcImhlaWdodFwiXSA9IFwiMTAwJVwiO1xuXG4gICAgICAgICAgICAgICAgc291cmNlcy5mb3JFYWNoKGZ1bmN0aW9uKGQsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJ1dHRvbldyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgICAgICAgICBidXR0b25zQ29udGFpbmVyLmFwcGVuZENoaWxkKGJ1dHRvbldyYXBwZXIpO1xuICAgICAgICAgICAgICAgICAgICBidXR0b25XcmFwcGVyLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwic3ZnLWNyb3diYXJcIik7XG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbldyYXBwZXIuc3R5bGVbXCJwb3NpdGlvblwiXSA9IFwiYWJzb2x1dGVcIjtcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uV3JhcHBlci5zdHlsZVtcInRvcFwiXSA9IChkLnRvcCArIGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wKSArIFwicHhcIjtcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uV3JhcHBlci5zdHlsZVtcImxlZnRcIl0gPSAoZG9jdW1lbnQuYm9keS5zY3JvbGxMZWZ0ICsgZC5sZWZ0KSArIFwicHhcIjtcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uV3JhcHBlci5zdHlsZVtcInBhZGRpbmdcIl0gPSBcIjRweFwiO1xuICAgICAgICAgICAgICAgICAgICBidXR0b25XcmFwcGVyLnN0eWxlW1wiYm9yZGVyLXJhZGl1c1wiXSA9IFwiM3B4XCI7XG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbldyYXBwZXIuc3R5bGVbXCJjb2xvclwiXSA9IFwid2hpdGVcIjtcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uV3JhcHBlci5zdHlsZVtcInRleHQtYWxpZ25cIl0gPSBcImNlbnRlclwiO1xuICAgICAgICAgICAgICAgICAgICBidXR0b25XcmFwcGVyLnN0eWxlW1wiZm9udC1mYW1pbHlcIl0gPSBcIidIZWx2ZXRpY2EgTmV1ZSdcIjtcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uV3JhcHBlci5zdHlsZVtcImJhY2tncm91bmRcIl0gPSBcInJnYmEoMCwgMCwgMCwgMC44KVwiO1xuICAgICAgICAgICAgICAgICAgICBidXR0b25XcmFwcGVyLnN0eWxlW1wiYm94LXNoYWRvd1wiXSA9IFwiMHB4IDRweCAxOHB4IHJnYmEoMCwgMCwgMCwgMC40KVwiO1xuICAgICAgICAgICAgICAgICAgICBidXR0b25XcmFwcGVyLnN0eWxlW1wiY3Vyc29yXCJdID0gXCJtb3ZlXCI7XG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbldyYXBwZXIudGV4dENvbnRlbnQgPSAgXCJTVkcgI1wiICsgaSArIFwiOiBcIiArIChkLmlkID8gXCIjXCIgKyBkLmlkIDogXCJcIikgKyAoZC5jbGFzcyA/IFwiLlwiICsgZC5jbGFzcyA6IFwiXCIpO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgICAgICAgICAgICAgICAgICBidXR0b25XcmFwcGVyLmFwcGVuZENoaWxkKGJ1dHRvbik7XG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5zZXRBdHRyaWJ1dGUoXCJkYXRhLXNvdXJjZS1pZFwiLCBpKTtcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uLnN0eWxlW1wid2lkdGhcIl0gPSBcIjE1MHB4XCI7XG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5zdHlsZVtcImZvbnQtc2l6ZVwiXSA9IFwiMTJweFwiO1xuICAgICAgICAgICAgICAgICAgICBidXR0b24uc3R5bGVbXCJsaW5lLWhlaWdodFwiXSA9IFwiMS40ZW1cIjtcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uLnN0eWxlW1wibWFyZ2luXCJdID0gXCI1cHggMCAwIDBcIjtcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uLnRleHRDb250ZW50ID0gXCJEb3dubG9hZFwiO1xuXG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5vbmNsaWNrID0gZnVuY3Rpb24oZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGVsLCBkLCBpLCBzb3VyY2VzKVxuICAgICAgICAgICAgICAgICAgICAgICAgZG93bmxvYWQoZCk7XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBjbGVhbnVwKCkge1xuICAgICAgICAgICAgICAgIHZhciBjcm93YmFyRWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnN2Zy1jcm93YmFyXCIpO1xuXG4gICAgICAgICAgICAgICAgW10uZm9yRWFjaC5jYWxsKGNyb3diYXJFbGVtZW50cywgZnVuY3Rpb24oZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0U291cmNlcyhkb2MsIGVtcHR5U3ZnRGVjbGFyYXRpb25Db21wdXRlZCkge1xuICAgICAgICAgICAgICAgIHZhciBzdmdJbmZvID0gW10sXG4gICAgICAgICAgICAgICAgICAgIHN2Z3MgPSBkb2MucXVlcnlTZWxlY3RvckFsbChcInN2Z1wiKTtcblxuICAgICAgICAgICAgICAgIFtdLmZvckVhY2guY2FsbChzdmdzLCBmdW5jdGlvbiAoc3ZnKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgc3ZnLnNldEF0dHJpYnV0ZShcInZlcnNpb25cIiwgXCIxLjFcIik7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gcmVtb3ZpbmcgYXR0cmlidXRlcyBzbyB0aGV5IGFyZW4ndCBkb3VibGVkIHVwXG4gICAgICAgICAgICAgICAgICAgIHN2Zy5yZW1vdmVBdHRyaWJ1dGUoXCJ4bWxuc1wiKTtcbiAgICAgICAgICAgICAgICAgICAgc3ZnLnJlbW92ZUF0dHJpYnV0ZShcInhsaW5rXCIpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZXNlIGFyZSBuZWVkZWQgZm9yIHRoZSBzdmdcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzdmcuaGFzQXR0cmlidXRlTlMocHJlZml4LnhtbG5zLCBcInhtbG5zXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdmcuc2V0QXR0cmlidXRlTlMocHJlZml4LnhtbG5zLCBcInhtbG5zXCIsIHByZWZpeC5zdmcpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzdmcuaGFzQXR0cmlidXRlTlMocHJlZml4LnhtbG5zLCBcInhtbG5zOnhsaW5rXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdmcuc2V0QXR0cmlidXRlTlMocHJlZml4LnhtbG5zLCBcInhtbG5zOnhsaW5rXCIsIHByZWZpeC54bGluayk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBzZXRJbmxpbmVTdHlsZXMoc3ZnLCBlbXB0eVN2Z0RlY2xhcmF0aW9uQ29tcHV0ZWQpO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBzb3VyY2UgPSAobmV3IFhNTFNlcmlhbGl6ZXIoKSkuc2VyaWFsaXplVG9TdHJpbmcoc3ZnKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlY3QgPSBzdmcuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICAgICAgICAgIHN2Z0luZm8ucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b3A6IHJlY3QudG9wLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogcmVjdC5sZWZ0LFxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHJlY3Qud2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IHJlY3QuaGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6IHN2Zy5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBzdmcuZ2V0QXR0cmlidXRlKFwiaWRcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZEVsZW1lbnRDb3VudDogc3ZnLmNoaWxkRWxlbWVudENvdW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiBbZG9jdHlwZSArIHNvdXJjZV1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN2Z0luZm87XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGRvd25sb2FkKHNvdXJjZSkge1xuICAgICAgICAgICAgICAgIHZhciBmaWxlbmFtZSA9IFwidW50aXRsZWRcIjtcblxuICAgICAgICAgICAgICAgIGlmIChzb3VyY2UuaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgZmlsZW5hbWUgPSBzb3VyY2UuaWQ7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzb3VyY2UuY2xhc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgZmlsZW5hbWUgPSBzb3VyY2UuY2xhc3M7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh3aW5kb3cuZG9jdW1lbnQudGl0bGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZmlsZW5hbWUgPSB3aW5kb3cuZG9jdW1lbnQudGl0bGUucmVwbGFjZSgvW15hLXowLTldL2dpLCAnLScpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIHVybCA9IHdpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMKG5ldyBCbG9iKHNvdXJjZS5zb3VyY2UsIHsgXCJ0eXBlXCIgOiBcInRleHRcXC94bWxcIiB9KSk7XG5cbiAgICAgICAgICAgICAgICB2YXIgYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpO1xuICAgICAgICAgICAgICAgIGJvZHkuYXBwZW5kQ2hpbGQoYSk7XG4gICAgICAgICAgICAgICAgYS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcInN2Zy1jcm93YmFyXCIpO1xuICAgICAgICAgICAgICAgIGEuc2V0QXR0cmlidXRlKFwiZG93bmxvYWRcIiwgZmlsZW5hbWUgKyBcIi5zdmdcIik7XG4gICAgICAgICAgICAgICAgYS5zZXRBdHRyaWJ1dGUoXCJocmVmXCIsIHVybCk7XG4gICAgICAgICAgICAgICAgYS5zdHlsZVtcImRpc3BsYXlcIl0gPSBcIm5vbmVcIjtcbiAgICAgICAgICAgICAgICBhLmNsaWNrKCk7XG5cbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB3aW5kb3cuVVJMLnJldm9rZU9iamVjdFVSTCh1cmwpO1xuICAgICAgICAgICAgICAgIH0sIDEwKTtcbiAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICBmdW5jdGlvbiBzZXRJbmxpbmVTdHlsZXMoc3ZnLCBlbXB0eVN2Z0RlY2xhcmF0aW9uQ29tcHV0ZWQpIHtcblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGV4cGxpY2l0bHlTZXRTdHlsZSAoZWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY1NTU3R5bGVEZWNsYXJhdGlvbkNvbXB1dGVkID0gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGksIGxlbiwga2V5LCB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbXB1dGVkU3R5bGVTdHIgPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGk9MCwgbGVuPWNTU1N0eWxlRGVjbGFyYXRpb25Db21wdXRlZC5sZW5ndGg7IGk8bGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleT1jU1NTdHlsZURlY2xhcmF0aW9uQ29tcHV0ZWRbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT1jU1NTdHlsZURlY2xhcmF0aW9uQ29tcHV0ZWQuZ2V0UHJvcGVydHlWYWx1ZShrZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlIT09ZW1wdHlTdmdEZWNsYXJhdGlvbkNvbXB1dGVkLmdldFByb3BlcnR5VmFsdWUoa2V5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXB1dGVkU3R5bGVTdHIrPWtleStcIjpcIit2YWx1ZStcIjtcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnc3R5bGUnLCBjb21wdXRlZFN0eWxlU3RyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gdHJhdmVyc2Uob2JqKXtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRyZWUgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgdHJlZS5wdXNoKG9iaik7XG4gICAgICAgICAgICAgICAgICAgIHZpc2l0KG9iaik7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHZpc2l0KG5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub2RlICYmIG5vZGUuaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkID0gbm9kZS5maXJzdENoaWxkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGQubm9kZVR5cGUgPT09IDEgJiYgY2hpbGQubm9kZU5hbWUgIT0gJ1NDUklQVCcpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJlZS5wdXNoKGNoaWxkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpc2l0KGNoaWxkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZCA9IGNoaWxkLm5leHRTaWJsaW5nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJlZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gaGFyZGNvZGUgY29tcHV0ZWQgY3NzIHN0eWxlcyBpbnNpZGUgc3ZnXG4gICAgICAgICAgICAgICAgdmFyIGFsbEVsZW1lbnRzID0gdHJhdmVyc2Uoc3ZnKTtcbiAgICAgICAgICAgICAgICB2YXIgaSA9IGFsbEVsZW1lbnRzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICB3aGlsZSAoaS0tKXtcbiAgICAgICAgICAgICAgICAgICAgZXhwbGljaXRseVNldFN0eWxlKGFsbEVsZW1lbnRzW2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cblxuICAgICAgICB9O1xuICAgIH0pO1xuXG5cblxuXG5cblxuXG5cblxuIiwiYW5ndWxhci5tb2R1bGUoJ3dpbnN0b24nKVxuICAgIC5jb250cm9sbGVyKCduZXdDVFJMJyxmdW5jdGlvbigkc2NvcGUsYXBpU1ZDLHByZWxvYWRPYmopIHtcbiAgICAgICAgJHNjb3BlLndpbnN0b24gPSBwcmVsb2FkT2JqLmRhdGEuZGF0YVswXTtcbiAgICAgICAgJHNjb3BlLndpbnN0b24uYWRkU3RhdHMgPSBmYWxzZTtcbiAgICAgICAgJHNjb3BlLnBsYXllcnMgPSBwcmVsb2FkT2JqLmRhdGEuZGF0YTtcbiAgICAgICAgJHNjb3BlLm1hcmlvdGEgPSBwcmVsb2FkT2JqLmRhdGEuZGF0YVsxXTtcbiAgICAgICAgJHNjb3BlLm1hcmlvdGEuYWRkU3RhdHMgPSBmYWxzZTtcbiAgICAgICAgJHNjb3BlLmdyYXBoID0ge1xuICAgICAgICAgICAgd2Vla3M6IFsxLDIsMyw0LDUsNiw3LDgsOSwxMCwxMSwxMiwxMywxNCwxNSwxNiwxNywxOF1cbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUudG9nZ2xlV2luc3RvbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJHNjb3BlLndpbnN0b24uYWRkU3RhdHMgPSAhJHNjb3BlLndpbnN0b24uYWRkU3RhdHM7XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLmFkZFdpbnN0b25TdGF0cyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHN0cmluZyA9IFwicGxheWVyPTEmc2Vhc29uPTIwMTUmXCI7XG4gICAgICAgICAgICB2YXIgcGFyYW1zID0gW107XG4gICAgICAgICAgICBfLmZvckVhY2goJHNjb3BlLndpbnN0b24ubmV3LCBmdW5jdGlvbih2YWwsa2V5KSB7XG4gICAgICAgICAgICAgICAgcGFyYW1zLnB1c2goa2V5K1wiPVwiK3ZhbClcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc3RyaW5nICs9IHBhcmFtcy5qb2luKFwiJlwiKTtcbiAgICAgICAgICAgIGFwaVNWQy5hZGQoc3RyaW5nKS5zdWNjZXNzKGZ1bmN0aW9uKHJlcykge1xuICAgICAgICAgICAgICAgIGlmIChyZXMuc3RhdHVzID09PSBcInN1Y2Nlc3NcIikgYXBpU1ZDLmxvYWQoKS5zdWNjZXNzKFxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbihyZXMpe1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLndpbnN0b24gPSByZXMuZGF0YVswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5wbGF5ZXJzID0gcmVzLmRhdGE7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KVxuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5kZWxldGVXaW5zdG9uID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBhcGlTVkMucmVtb3ZlKFwicGxheWVyPTEmd2Vlaz1cIiskc2NvcGUud2luc3Rvbi5kZWxldGUuc3BsaXQoJyAnKVsxXSkuc3VjY2VzcyhcbiAgICAgICAgICAgICAgICBmdW5jdGlvbihyZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlcy5zdGF0dXMgPT09IFwic3VjY2Vzc1wiKSBhcGlTVkMubG9hZCgpLnN1Y2Nlc3MoXG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbihyZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUud2luc3RvbiA9IHJlcy5kYXRhWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5wbGF5ZXJzID0gcmVzLmRhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApXG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLnRvZ2dsZU1hcmlvdGEgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICRzY29wZS5tYXJpb3RhLmFkZFN0YXRzID0gISRzY29wZS5tYXJpb3RhLmFkZFN0YXRzO1xuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5hZGRNYXJpb3RhU3RhdHMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBzdHJpbmcgPSBcInBsYXllcj0yJnNlYXNvbj0yMDE1JlwiO1xuICAgICAgICAgICAgdmFyIHBhcmFtcyA9IFtdO1xuICAgICAgICAgICAgXy5mb3JFYWNoKCRzY29wZS5tYXJpb3RhLm5ldywgZnVuY3Rpb24odmFsLGtleSkge1xuICAgICAgICAgICAgICAgIHBhcmFtcy5wdXNoKGtleStcIj1cIit2YWwpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHN0cmluZyArPSBwYXJhbXMuam9pbihcIiZcIik7XG4gICAgICAgICAgICBhcGlTVkMuYWRkKHN0cmluZykuc3VjY2VzcyhmdW5jdGlvbihyZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAocmVzLnN0YXR1cyA9PT0gXCJzdWNjZXNzXCIpIGFwaVNWQy5sb2FkKCkuc3VjY2VzcyhcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24ocmVzKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5tYXJpb3RhID0gcmVzLmRhdGFbMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucGxheWVycyA9IHJlcy5kYXRhO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUuZGVsZXRlTWFyaW90YSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgYXBpU1ZDLnJlbW92ZShcInBsYXllcj0yJndlZWs9XCIrJHNjb3BlLm1hcmlvdGEuZGVsZXRlLnNwbGl0KCcgJylbMV0pLnN1Y2Nlc3MoXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24ocmVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXMuc3RhdHVzID09PSBcInN1Y2Nlc3NcIikgYXBpU1ZDLmxvYWQoKS5zdWNjZXNzKFxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24ocmVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1hcmlvdGEgPSByZXMuZGF0YVsxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucGxheWVycyA9IHJlcy5kYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKVxuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5kcmF3R3JhcGggPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICRzY29wZS5ncmFwaC5kYXRhID0gW107XG4gICAgICAgICAgICAkc2NvcGUucmF0ZWQgPSBbXTtcbiAgICAgICAgICAgIHZhciB3ZWVrID0gJHNjb3BlLmdyYXBoLnNlbGVjdGVkLnNwbGl0KCcgJylbMV07XG4gICAgICAgICAgICBfLmZvckVhY2goJHNjb3BlLnBsYXllcnMsZnVuY3Rpb24ocGxheWVyKSB7XG4gICAgICAgICAgICAgICAgdmFyIHggPSB7bmFtZTpwbGF5ZXIubmFtZSxyYXRpbmdzOiBfLnRha2UocGxheWVyLnJhbmtpbmdzLCB3ZWVrKSxzZWxlY3RlZDogZmFsc2V9O1xuICAgICAgICAgICAgICAgICRzY29wZS5ncmFwaC5kYXRhLnB1c2goeCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIF8uZm9yRWFjaCgkc2NvcGUuZ3JhcGguZGF0YSwgZnVuY3Rpb24ocGxheWVyKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBsYXllci5yYXRpbmdzW3BsYXllci5yYXRpbmdzLmxlbmd0aCAtIDFdKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwbGF5ZXIucmF0aW5nc1twbGF5ZXIucmF0aW5ncy5sZW5ndGgtMV1bXCJyYXRpbmdcIl0gIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5yYXRlZC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXI6IHBsYXllci5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhdGluZzogcGxheWVyLnJhdGluZ3NbcGxheWVyLnJhdGluZ3MubGVuZ3RoIC0gMV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWQ6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBMSU5FIENIQVJUXG4gICAgICAgICAgICB2YXIgbWFyZ2luID0ge3RvcDogMjAsIHJpZ2h0OiAyMCwgYm90dG9tOiAzMCwgbGVmdDogNTB9O1xuICAgICAgICAgICAgdmFyIHdpZHRoID0gOTYwIC0gbWFyZ2luLmxlZnQgLSBtYXJnaW4ucmlnaHQ7XG4gICAgICAgICAgICB2YXIgaGVpZ2h0ID0gNTAwIC0gbWFyZ2luLnRvcCAtIG1hcmdpbi5ib3R0b207XG5cbiAgICAgICAgICAgIHZhciB4ID0gZDMuc2NhbGUubGluZWFyKCkucmFuZ2UoWzAsd2lkdGhdKS5kb21haW4oWzEsd2Vla10pO1xuICAgICAgICAgICAgdmFyIHkgPSBkMy5zY2FsZS5saW5lYXIoKS5kb21haW4oWzAsMTYwXSkucmFuZ2UoW2hlaWdodCwwXSk7XG4gICAgICAgICAgICB2YXIgeEF4aXMgPSBkMy5zdmcuYXhpcygpLnNjYWxlKHgpLm9yaWVudChcImJvdHRvbVwiKS50aWNrVmFsdWVzKGQzLnJhbmdlKDEsd2VlayArIDEpKS50aWNrRm9ybWF0KGQzLmZvcm1hdChcImRcIikpO1xuICAgICAgICAgICAgdmFyIHlBeGlzID0gZDMuc3ZnLmF4aXMoKS5zY2FsZSh5KS5vcmllbnQoXCJsZWZ0XCIpO1xuICAgICAgICAgICAgdmFyIGxpbmUgPSBkMy5zdmcubGluZSgpLngoZnVuY3Rpb24oZCl7IHJldHVybiB4KGQud2Vlayl9KS55KGZ1bmN0aW9uKGQpeyByZXR1cm4geShkLnJhdGluZyl9KVxuICAgICAgICAgICAgICAgIC5pbnRlcnBvbGF0ZSgnYmFzaXMnKTtcblxuXG5cbiAgICAgICAgICAgIHZhciBzdmcgPSBkMy5zZWxlY3QoXCIjZ3JhcGhcIikuc2VsZWN0X29yX2FwcGVuZChcInN2Z1wiKS5hdHRyKFwid2lkdGhcIiwgd2lkdGggKyBtYXJnaW4ubGVmdCArIG1hcmdpbi5yaWdodClcbiAgICAgICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBoZWlnaHQgKyBtYXJnaW4udG9wICsgbWFyZ2luLmJvdHRvbSkuc2VsZWN0X29yX2FwcGVuZChcImcuY29udGFpbmVyXCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyBtYXJnaW4ubGVmdCArIFwiLFwiICsgbWFyZ2luLnRvcCArIFwiKVwiKTtcblxuICAgICAgICAgICAgdmFyIGxpbmVzID0gc3ZnLnNlbGVjdF9vcl9hcHBlbmQoXCJnLmxpbmVzXCIpLnNlbGVjdEFsbCgncGF0aCcpLmRhdGEoJHNjb3BlLmdyYXBoLmRhdGEucmV2ZXJzZSgpLGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICBpZiAoZCkgcmV0dXJuIGQubmFtZTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBsaW5lcy5lbnRlcigpLmFwcGVuZCgncGF0aCcpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQubmFtZSArIFwiIGxpbmVzXCI7IH0pXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJkXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGxpbmUoZC5yYXRpbmdzKX0pO1xuXG4gICAgICAgICAgICBsaW5lcy50cmFuc2l0aW9uKCkuYXR0cihcImRcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gbGluZShkLnJhdGluZ3MpfSlcblxuICAgICAgICAgICAgbGluZXMuZXhpdCgpLnJlbW92ZSgpO1xuXG4gICAgICAgICAgICBzdmcuc2VsZWN0X29yX2FwcGVuZChcImcueFwiKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ4IGF4aXNcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZSgwLFwiICsgaGVpZ2h0ICsgXCIpXCIpXG4gICAgICAgICAgICAgICAgLmNhbGwoeEF4aXMpXG4gICAgICAgICAgICAgICAgLnNlbGVjdF9vcl9hcHBlbmQoXCJ0ZXh0LnhheGlzXCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ5XCIsMjUpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ4XCIsNDUwKVxuICAgICAgICAgICAgICAgIC5zdHlsZShcInRleHQtYW5jaG9yXCIsXCJlbmRcIilcbiAgICAgICAgICAgICAgICAuc3R5bGUoXCJkeVwiLFwiLjcxZW1cIilcbiAgICAgICAgICAgICAgICAudGV4dChcIldlZWtcIik7XG5cbiAgICAgICAgICAgIHN2Zy5zZWxlY3Rfb3JfYXBwZW5kKFwiZy55XCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInkgYXhpc1wiKVxuICAgICAgICAgICAgICAgIC5jYWxsKHlBeGlzKVxuICAgICAgICAgICAgICAgIC5zZWxlY3Rfb3JfYXBwZW5kKFwidGV4dC55YXhpc1wiKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsXCJyb3RhdGUoLTkwKVwiKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwieVwiLC01MClcbiAgICAgICAgICAgICAgICAuYXR0cihcInhcIiwgLTE1MClcbiAgICAgICAgICAgICAgICAuYXR0cihcImR5XCIsIFwiLjcxZW1cIilcbiAgICAgICAgICAgICAgICAuc3R5bGUoXCJ0ZXh0LWFuY2hvclwiLFwiZW5kXCIpXG4gICAgICAgICAgICAgICAgLnRleHQoXCJRQiBSYXRpbmcgKGN1bXVsYXRpdmUpXCIpO1xuXG4gICAgICAgICAgICAvLyBDT05UUk9MU1xuICAgICAgICAgICAgdmFyIGNvbG9yTWFwID0ge307XG4gICAgICAgICAgICBfLmZvckVhY2goJHNjb3BlLnBsYXllcnMsZnVuY3Rpb24ocGxheWVyKSB7XG4gICAgICAgICAgICAgICAgY29sb3JNYXBbcGxheWVyLm5hbWVdID0gSlNPTi5wYXJzZShwbGF5ZXIuY29sb3JzKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB2YXIgY29udHJvbHMgPSBkMy5zZWxlY3QoXCIjY29udHJvbEJveFwiKS5zZWxlY3RBbGwoXCJkaXZcIikuZGF0YSgkc2NvcGUuZ3JhcGguZGF0YSwgZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgIGlmIChkKSByZXR1cm4gZC5uYW1lO1xuICAgICAgICAgICAgfSkuZW50ZXIoKS5hcHBlbmQoXCJkaXZcIikuYXR0cihcImNsYXNzXCIsXCJjb250cm9sbGVyXCIpLnN0eWxlKHtcbiAgICAgICAgICAgICAgICBib3JkZXI6IFwiNHB4IHNvbGlkXCIsXG4gICAgICAgICAgICAgICAgXCJib3JkZXItY29sb3JcIjogZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29sb3JNYXBbZC5uYW1lXS5wcmltYXJ5O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjb250cm9scy5hcHBlbmQoXCJkaXZcIikuaHRtbChmdW5jdGlvbihkKXtyZXR1cm4gZC5uYW1lfSk7XG5cbiAgICAgICAgICAgIGNvbnRyb2xzLm9uKFwibW91c2VvdmVyXCIsZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgZDMuc2VsZWN0KHRoaXMpLnN0eWxlKHtcbiAgICAgICAgICAgICAgICAgICAgXCJib3JkZXItY29sb3JcIjogZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbG9yTWFwW2QubmFtZV0uc2Vjb25kYXJ5O1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBcImJhY2tncm91bmQtY29sb3JcIjogZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbG9yTWFwW2QubmFtZV0ucHJpbWFyeTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pLnNlbGVjdEFsbCgnZGl2Jykuc3R5bGUoXCJjb2xvclwiLFwid2hpdGVzbW9rZVwiKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjb250cm9scy5vbihcIm1vdXNlb3V0XCIsZnVuY3Rpb24oY29udHJvbCkge1xuICAgICAgICAgICAgICAgIGlmICghY29udHJvbC5zZWxlY3RlZCkge1xuICAgICAgICAgICAgICAgICAgICBkMy5zZWxlY3QodGhpcykuc3R5bGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJib3JkZXItY29sb3JcIjogZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb2xvck1hcFtkLm5hbWVdLnByaW1hcnk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJiYWNrZ3JvdW5kLWNvbG9yXCI6IFwid2hpdGVcIlxuICAgICAgICAgICAgICAgICAgICB9KS5zZWxlY3RBbGwoJ2RpdicpLnN0eWxlKFwiY29sb3JcIixcImJsYWNrXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjb250cm9scy5vbihcImNsaWNrXCIsZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNlbGVjdGVkUCA9IGQzLnNlbGVjdCh0aGlzKS5zZWxlY3RBbGwoXCJkaXZcIikuaHRtbCgpO1xuICAgICAgICAgICAgICAgIHZhciBnZGF0YSA9IF8uZmlsdGVyKCRzY29wZS5ncmFwaC5kYXRhLGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQubmFtZSA9PT0gc2VsZWN0ZWRQXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBfLmZvckVhY2goZ2RhdGEsZnVuY3Rpb24ocGxheWVyKXtcbiAgICAgICAgICAgICAgICAgICAgcGxheWVyLnNlbGVjdGVkID0gIXBsYXllci5zZWxlY3RlZDtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIGNvbnRyb2xzLmVhY2goZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZC5uYW1lID09PSBzZWxlY3RlZFAgfHwgZC5zZWxlY3RlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZDMuc2VsZWN0KHRoaXMpLnN0eWxlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImJvcmRlci1jb2xvclwiOiBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb2xvck1hcFtkLm5hbWVdLnNlY29uZGFyeTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiYmFja2dyb3VuZC1jb2xvclwiOiBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb2xvck1hcFtkLm5hbWVdLnByaW1hcnk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSkuc2VsZWN0QWxsKCdkaXYnKS5zdHlsZShcImNvbG9yXCIsXCJ3aGl0ZXNtb2tlXCIpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZDMuc2VsZWN0KHRoaXMpLnN0eWxlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImJvcmRlci1jb2xvclwiOiBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb2xvck1hcFtkLm5hbWVdLnByaW1hcnk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImJhY2tncm91bmQtY29sb3JcIjogXCJ3aGl0ZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICB9KS5zZWxlY3RBbGwoJ2RpdicpLnN0eWxlKFwiY29sb3JcIixcImJsYWNrXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgbGluZXMuZWFjaChmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkLnNlbGVjdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkMy5zZWxlY3QodGhpcykuc3R5bGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic3Ryb2tlLXdpZHRoXCI6IFwiM3B4XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzdHJva2VcIjogZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29sb3JNYXBbZC5uYW1lXS5wcmltYXJ5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ6LWluZGV4XCI6IFwiMTBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQzLnNlbGVjdCh0aGlzKS5zdHlsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzdHJva2Utd2lkdGhcIjpcIjFweFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic3Ryb2tlXCI6IFwibGlnaHRncmV5XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ6LWluZGV4XCI6IFwiMFwiXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9KTsiLCJhbmd1bGFyLm1vZHVsZSgnd2luc3RvbicpXG4gICAgLmNvbmZpZyhbJyRzdGF0ZVByb3ZpZGVyJyxmdW5jdGlvbigkc3RhdGVQcm92aWRlciwgc2VhcmNoU3ZjKXtcbiAgICAgICAgLy8gVGhlc2Ugc3RhdGVzIGNvcnJlc3BvbmQgdG8gdGhlIHBhZ2VzIG9uIHRoZSBhcHAuIEhvb2tzIHVwIHRlbXBsYXRlcyBhbmQgdmlld3NcbiAgICAgICAgJHN0YXRlUHJvdmlkZXIuc3RhdGUoJ2hvbWUnLHtcbiAgICAgICAgICAgIHVybDogJy8nLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd1cGRhdGVTdGF0cy5odG1sJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICduZXdDVFJMJyxcbiAgICAgICAgICAgIHJlc29sdmU6IHtcbiAgICAgICAgICAgICAgICBwcmVsb2FkT2JqOiBmdW5jdGlvbigkaHR0cCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJGh0dHAoe21ldGhvZDonR0VUJyx1cmw6Jy9hcGkvc3RhdHMnfSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICAgICAgLy8uc3RhdGUoJ3NlYXJjaCcse1xuICAgICAgICAgICAgLy8gICAgdXJsOiAnL3NlYXJjaCcsXG4gICAgICAgICAgICAvLyAgICB0ZW1wbGF0ZVVybDogJ3NlYXJjaC5odG1sJyxcbiAgICAgICAgICAgIC8vICAgIGNvbnRyb2xsZXI6ICdzZWFyY2hDVFJMJyxcbiAgICAgICAgICAgIC8vICAgIHJlc29sdmU6IHtcbiAgICAgICAgICAgIC8vICAgICAgICAvLyBUaGlzIHF1ZXJpZXMgdGhlIHNlcnZlciBmb3IgZGlzdGluY3QgZGVwYXJ0bWVudHMgYW5kIHByZWxvYWRzIHRoZSBkZXBhcnRtZW50cyBkcm9wIGRvd25cbiAgICAgICAgICAgIC8vICAgICAgICBwcmVsb2FkT0JKOiBmdW5jdGlvbigkaHR0cCkge1xuICAgICAgICAgICAgLy8gICAgICAgICAgICByZXR1cm4gJGh0dHAoe21ldGhvZDonR0VUJyx1cmw6Jy9hcGkvZGVwYXJ0bWVudHMnfSk7XG4gICAgICAgICAgICAvLyAgICAgICAgfVxuICAgICAgICAgICAgLy8gICAgfVxuICAgICAgICAgICAgLy99KVxuICAgICAgICAgICAgLy8uc3RhdGUoJ2RldGFpbHMnLHtcbiAgICAgICAgICAgIC8vICAgIC8vIFRoZSA6aWQgaXMgdGhlIHN0cmluZyBwYXNzZWQgaW4gZnJvbSB0aGUgVVJMIGNvcnJlc3BvbmRzIHRvIHRoZSBwZXJzb25JRCBpbiB0aGUgdGhlIGRhdGFiYXNlXG4gICAgICAgICAgICAvLyAgICB1cmw6ICcvZGV0YWlscy86aWQnLFxuICAgICAgICAgICAgLy8gICAgdGVtcGxhdGVVcmw6ICdkZXRhaWxzLmh0bWwnLFxuICAgICAgICAgICAgLy8gICAgY29udHJvbGxlcjogJ2RldGFpbENUUkwnXG4gICAgICAgICAgICAvL30pXG4gICAgfV0pXG4gICAgLnJ1bihbJyRzdGF0ZScsZnVuY3Rpb24oJHN0YXRlKXtcbiAgICAgICAgLy8gRXZlcnl0aGluZyBpbnNpZGUgaGVyZSB3aWxsIGJlIHJ1biBvbmUgdGltZSBvbmNlIHRoZSBhcHAgaGFzIGxvYWRlZC4gR29vZCBwbGFjZSB0byBpbml0aWFsaXplIGFueXRoaW5nIHlvdSB3aWxsIGJlIHVzaW5nXG4gICAgICAgICRzdGF0ZS5nbygnaG9tZScpO1xuICAgIH1dKTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==