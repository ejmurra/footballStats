angular.module("winston",["ui.router"]),angular.module("winston").service("apiSVC",["$http",function(t){this.add=function(e){return t.get("/api/stats/add?"+e)},this.remove=function(e){return t.get("/api/stats/remove?"+e)},this.load=function(){return t.get("/api/stats")}}]),angular.module("winston").controller("mainCTRL",["$scope","apiSVC","preloadObj",function(t,e,a){function n(e){_.forEach(t.players,function(a){function n(t){var e,a=[];_.forEach(t.games,function(n,s){if(!e&&1==n.g&&n.passing_att){if(e={passing_comp:0,passing_yds:0,passing_td:0,passing_att:0,passing_int:0},null!=n.passing_comp&&(e.passing_comp+=n.passing_comp),null!=n.passing_yds&&(e.passing_yds+=n.passing_yds),null!=n.passing_td&&(e.passing_td+=n.passing_td),null!=n.passing_att&&(e.passing_att+=n.passing_att),null!=n.passing_int&&(e.passing_int+=n.passing_int),null!=e.passing_att&&0!=e.passing_att){var r=5*(e.passing_comp/e.passing_att-.3),i=.25*(e.passing_yds/e.passing_att-3),o=e.passing_td/e.passing_att*20,l=2.375-e.passing_int/e.passing_att*25;r>2.375&&(r=2.375),0>r&&(r=0),i>2.375&&(i=2.375),0>i&&(i=0),o>2.375&&(o=2.375),0>o&&(o=0),l>2.375&&(l=2.375),0>l&&(l=0);var c=(r+i+o+l)/6*100;a.push({week:s+1,rating:Math.round(100*(c+1e-5))/100,pid:t.id})}}else if(e||n.g)if(e||1!=n.g||n.passing_att){if(null!=n.passing_comp&&(e.passing_comp+=n.passing_comp),null!=n.passing_yds&&(e.passing_yds+=n.passing_yds),null!=n.passing_td&&(e.passing_td+=n.passing_td),null!=n.passing_att&&(e.passing_att+=n.passing_att),null!=n.passing_int&&(e.passing_int+=n.passing_int),null!=e.passing_att&&0!=e.passing_att){var r=5*(e.passing_comp/e.passing_att-.3),i=.25*(e.passing_yds/e.passing_att-3),o=e.passing_td/e.passing_att*20,l=2.375-e.passing_int/e.passing_att*25;r>2.375&&(r=2.375),0>r&&(r=0),i>2.375&&(i=2.375),0>i&&(i=0),o>2.375&&(o=2.375),0>o&&(o=0),l>2.375&&(l=2.375),0>l&&(l=0);var c=(r+i+o+l)/6*100;a.push({week:s+1,rating:Math.round(100*(c+1e-5))/100,pid:t.id})}}else{var d=a[a.length-1],u={week:d.week+1,rating:d.rating,pid:t.id};a.push(u)}else a.push({week:s+1,rating:null,pid:t.id})});var n={};return _.forEach(a,function(t){n[t.week]=t}),_.forEach(n,function(e,a){e||(0!=a?(e=n[a-1],e.week++):(e.week=1,e.rating=null,e.pid=t.id))}),n}a.games=[],_.forEach(t.games,function(t){t.player==a.id&&a.games.push(t)}),_.sortBy(a.games,function(t){return t.week});var s=_.values(n(a));a.ratings=_.take(s,e)}),_.forEach(t.players,function(t){t.className="other",1===t.id&&(t.className="jameis"),2===t.id&&(t.className="marcus"),t.ratings.forEach(function(e,a){e?(e.week=+e.week,e.rating=e.rating,e.pid=t.id):0!=a&&null!=t.ratings[a]?t.ratings[a]={week:t.ratings[a].week+1,rating:t.ratings[a].rating,pid:t.id}:t.ratings[a]={week:a+1,rating:null,pid:t.id}})});var a={top:20,right:20,bottom:30,left:50},n=960-a.right-a.left,s=500-a.top-a.bottom,r=d3.scale.linear().range([0,n]),i=d3.scale.linear().range([s,0]),o=d3.svg.axis().scale(r).orient("bottom").tickValues(d3.range(1,e+1)).tickFormat(d3.format("d")),l=d3.svg.axis().scale(i).orient("left"),c=d3.svg.line().x(function(t){return r(t.week)}).y(function(t){return i(t.rating)}).interpolate("basis"),d=d3.select("#graph").select_or_append("svg").attr("width",n+a.left+a.right).attr("height",s+a.top+a.bottom).select_or_append("g.container").attr("transform","translate("+a.left+","+a.top+")");r.domain([1,Number(e)]),i.domain([0,160]);var u=d.select_or_append("g.lines").selectAll("path").data(t.players.reverse(),function(t){return t?t.id:void 0});u.enter().append("path").attr("class",function(t){return t.className}).attr("name",function(t){return t.name}).attr("d",function(t){return c(t.ratings)}),u.attr("class",function(t){return t.className}).attr("name",function(t){return t.name}).transition().attr("d",function(t){return c(t.ratings)}),u.exit().remove(),d.select_or_append("g.x").attr("class","x axis").attr("transform","translate(0,"+s+")").call(o).select_or_append("text.xaxis").attr("y",25).attr("x",450).style("text-anchor","end").style("dy",".71em").text("Week"),d.select_or_append("g.y").attr("class","y axis").call(l).select_or_append("text.yaxis").attr("transform","rotate(-90)").attr("y",-50).attr("x",-150).attr("dy",".71em").style("text-anchor","end").text("QB Rating (cumulative)")}t._showInput=!1,t._showInputM=!1;"err"==a.data.status&&console.log(a.data.message),t.gameStats=a.data.data.winston,t.mGameStats=a.data.data.mariota,t.stats=new stats,t.Ustats=new Ustats,t.Mstats=new Ustats,t.newStats=function(){e.addNew(t.Ustats).success(function(a){"success"==a.status?(t.Ustats=new Ustats,t.toggleInput(),e.load().success(function(e){t.gameStats=e.data.winston})):"game_pk"==a.message.constraint?alert("Error: That game already exists in the database. Delete it first if you want to update it"):alert("Error: "+JSON.stringify(a.message.detail))})},t.newStatsM=function(){e.addNewM(t.Mstats).success(function(a){"success"==a.status?(t.Mstats=new Ustats,t.toggleInputM(),e.load().success(function(e){t.mGameStats=e.data.mariota})):"game_pk"==a.message.constraint?alert("Error: That game already exists in the database. Delete it first if you want to update it"):alert("Error: "+JSON.stringify(a.message.detail))})},t.toggleInput=function(){t._showInput=!t._showInput},t.toggleInputM=function(){t._showInputM=!t._showInputM},t.deleteRowM=function(){0!=t.mGameStats&&e.removeM().success(function(a){"success"==a.status&&e.load().success(function(e){t.mGameStats=e.data.mariota})})},t.deleteRow=function(){0!=t.gameStats&&e.remove().success(function(a){"success"==a.status&&e.load().success(function(e){t.gameStats=e.data.winston})})},t.maxGames=function(){var e=0;_.forEach(t.players,function(t){t.games.length>e&&(e=t.games.length)});for(var a=[],n=1;e+1>n;n++)a.push(n);return a},t.players=a.data.data.players,t.games=a.data.data.games,_.forEach(t.players,function(e){e.games=[],_.forEach(t.games,function(t){t.player===e.id&&e.games.push(t)})});var s=function(t,e){function a(t){if(null!=t.passing_att&&0!=t.passing_att){var e=5*(s.passing_comp/s.passing_att-.3),a=.25*(s.passing_yds/s.passing_att-3),n=s.passing_td/s.passing_att*20,r=2.375-s.passing_int/s.passing_att*25;return e>2.375&&(e=2.375),0>e&&(e=0),a>2.375&&(a=2.375),0>a&&(a=0),n>2.375&&(n=2.375),0>n&&(n=0),r>2.375&&(r=2.375),0>r&&(r=0),(e+a+n+r)/6*100}}var n=_.take(t.games,e),s={passing_comp:0,passing_yds:0,passing_td:0,passing_att:0,passing_int:0};return _.forEach(n,function(t){null!=t.passing_comp&&(s.passing_comp+=t.passing_comp),null!=t.passing_yds&&(s.passing_yds+=t.passing_yds),null!=t.passing_td&&(s.passing_td+=t.passing_td),null!=t.passing_att&&(s.passing_att+=t.passing_att),null!=t.passing_int&&(s.passing_int+=t.passing_int)}),t.rating=a(s),t};t.ratePlayers=function(){t.chartActive=!0;var a=$("#week2rate").val().split(" ")[1],r=[];t.rated=[],e.load().success(function(e){t.players=e.data.players,t.games=e.data.games,t.gameStates=e.data.winston,_.forEach(t.players,function(e){e.games=[],_.forEach(t.games,function(t){t.player===e.id&&e.games.push(t)}),_.sortBy(e.games,function(t){return t.week})}),_.forEach(t.players,function(t){s(t,a),r.push({player:t.name,rating:Math.round(100*(t.rating+1e-5))/100,id:"p"+t.id})});var i=_.sortBy(r,function(t){return t.rating});i=_.filter(i,function(t){return t.rating}),_.forEach(i.reverse(),function(e,a){e.rank=a+1,t.rated.push(e)}),n(a)})},t.chartActive=!1,t.dl=function(){function t(){var t=[window.document],a=[];iframes=document.querySelectorAll("iframe"),objects=document.querySelectorAll("object");var r=window.document.createElementNS(l.svg,"svg");window.document.body.appendChild(r);var i=getComputedStyle(r);[].forEach.call(iframes,function(e){try{e.contentDocument&&t.push(e.contentDocument)}catch(a){console.log(a)}}),[].forEach.call(objects,function(e){try{e.contentDocument&&t.push(e.contentDocument)}catch(a){console.log(a)}}),t.forEach(function(t){for(var e=n(t,i),s=0;s<e.length;s++)a.push(e[s])}),a.length>1?e(a):a.length>0?s(a[0]):alert("The Crowbar couldnâ€™t find any SVG nodes.")}function e(t){a(),t.forEach(function(e){t.forEach(function(t){e!==t&&Math.abs(e.top-t.top)<38&&Math.abs(e.left-t.left)<38&&(t.top+=38,t.left+=38)})});var e=document.createElement("div");o.appendChild(e),e.setAttribute("class","svg-crowbar"),e.style["z-index"]=1e7,e.style.position="absolute",e.style.top=0,e.style.left=0;var n=document.createElement("div");o.appendChild(n),n.setAttribute("class","svg-crowbar"),n.style.background="rgba(255, 255, 255, 0.7)",n.style.position="fixed",n.style.left=0,n.style.top=0,n.style.width="100%",n.style.height="100%",t.forEach(function(t,a){var n=document.createElement("div");e.appendChild(n),n.setAttribute("class","svg-crowbar"),n.style.position="absolute",n.style.top=t.top+document.body.scrollTop+"px",n.style.left=document.body.scrollLeft+t.left+"px",n.style.padding="4px",n.style["border-radius"]="3px",n.style.color="white",n.style["text-align"]="center",n.style["font-family"]="'Helvetica Neue'",n.style.background="rgba(0, 0, 0, 0.8)",n.style["box-shadow"]="0px 4px 18px rgba(0, 0, 0, 0.4)",n.style.cursor="move",n.textContent="SVG #"+a+": "+(t.id?"#"+t.id:"")+(t["class"]?"."+t["class"]:"");var r=document.createElement("button");n.appendChild(r),r.setAttribute("data-source-id",a),r.style.width="150px",r.style["font-size"]="12px",r.style["line-height"]="1.4em",r.style.margin="5px 0 0 0",r.textContent="Download",r.onclick=function(e){s(t)}})}function a(){var t=document.querySelectorAll(".svg-crowbar");[].forEach.call(t,function(t){t.parentNode.removeChild(t)})}function n(t,e){var a=[],n=t.querySelectorAll("svg");return[].forEach.call(n,function(t){t.setAttribute("version","1.1"),t.removeAttribute("xmlns"),t.removeAttribute("xlink"),t.hasAttributeNS(l.xmlns,"xmlns")||t.setAttributeNS(l.xmlns,"xmlns",l.svg),t.hasAttributeNS(l.xmlns,"xmlns:xlink")||t.setAttributeNS(l.xmlns,"xmlns:xlink",l.xlink),r(t,e);var n=(new XMLSerializer).serializeToString(t),s=t.getBoundingClientRect();a.push({top:s.top,left:s.left,width:s.width,height:s.height,"class":t.getAttribute("class"),id:t.getAttribute("id"),childElementCount:t.childElementCount,source:[i+n]})}),a}function s(t){var e="untitled";t.id?e=t.id:t["class"]?e=t["class"]:window.document.title&&(e=window.document.title.replace(/[^a-z0-9]/gi,"-").toLowerCase());var a=window.URL.createObjectURL(new Blob(t.source,{type:"text/xml"})),n=document.createElement("a");o.appendChild(n),n.setAttribute("class","svg-crowbar"),n.setAttribute("download",e+".svg"),n.setAttribute("href",a),n.style.display="none",n.click(),setTimeout(function(){window.URL.revokeObjectURL(a)},10)}function r(t,e){function a(t){var a,n,s,r,i=getComputedStyle(t),o="";for(a=0,n=i.length;n>a;a++)s=i[a],r=i.getPropertyValue(s),r!==e.getPropertyValue(s)&&(o+=s+":"+r+";");t.setAttribute("style",o)}function n(t){function e(t){if(t&&t.hasChildNodes())for(var n=t.firstChild;n;)1===n.nodeType&&"SCRIPT"!=n.nodeName&&(a.push(n),e(n)),n=n.nextSibling}var a=[];return a.push(t),e(t),a}for(var s=n(t),r=s.length;r--;)a(s[r])}var i='<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">';window.URL=window.URL||window.webkitURL;var o=document.body,l={xmlns:"http://www.w3.org/2000/xmlns/",xlink:"http://www.w3.org/1999/xlink",svg:"http://www.w3.org/2000/svg"};t()}}]),angular.module("winston").controller("newCTRL",["$scope","apiSVC","preloadObj",function(t,e,a){t.winston=a.data.data[0],t.winston.addStats=!1,t.players=a.data.data,t.mariota=a.data.data[1],t.mariota.addStats=!1,t.graph={weeks:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]},t.toggleWinston=function(){t.winston.addStats=!t.winston.addStats},t.addWinstonStats=function(){var a="player=1&season=2015&",n=[];_.forEach(t.winston["new"],function(t,e){n.push(e+"="+t)}),a+=n.join("&"),e.add(a).success(function(a){"success"===a.status&&e.load().success(function(e){t.winston=e.data[0],t.players=e.data})})},t.deleteWinston=function(){e.remove("player=1&week="+t.winston["delete"].split(" ")[1]).success(function(a){"success"===a.status&&e.load().success(function(e){t.winston=e.data[0],t.players=e.data})})},t.toggleMariota=function(){t.mariota.addStats=!t.mariota.addStats},t.addMariotaStats=function(){var a="player=2&season=2015&",n=[];_.forEach(t.mariota["new"],function(t,e){n.push(e+"="+t)}),a+=n.join("&"),e.add(a).success(function(a){"success"===a.status&&e.load().success(function(e){t.mariota=e.data[1],t.players=e.data})})},t.deleteMariota=function(){e.remove("player=2&week="+t.mariota["delete"].split(" ")[1]).success(function(a){"success"===a.status&&e.load().success(function(e){t.mariota=e.data[1],t.players=e.data})})},t.drawGraph=function(){t.graph.data=[],t.rated=[];var e=t.graph.selected.split(" ")[1];_.forEach(t.players,function(a){var n={name:a.name,ratings:_.take(a.rankings,e),selected:!1};t.graph.data.push(n)}),_.forEach(t.graph.data,function(e){e.ratings[e.ratings.length-1]&&null!==e.ratings[e.ratings.length-1].rating&&t.rated.push({player:e.name,rating:e.ratings[e.ratings.length-1],selected:!1})});var a={top:20,right:20,bottom:30,left:50},n=960-a.left-a.right,s=500-a.top-a.bottom,r=d3.scale.linear().range([0,n]).domain([1,e]),i=d3.scale.linear().domain([0,160]).range([s,0]),o=d3.svg.axis().scale(r).orient("bottom").tickValues(d3.range(1,e+1)).tickFormat(d3.format("d")),l=d3.svg.axis().scale(i).orient("left"),c=d3.svg.line().x(function(t){return r(t.week)}).y(function(t){return i(t.rating)}).interpolate("basis"),d=d3.select("#graph").select_or_append("svg").attr("width",n+a.left+a.right).attr("height",s+a.top+a.bottom).select_or_append("g.container").attr("transform","translate("+a.left+","+a.top+")"),u=d.select_or_append("g.lines").selectAll("path").data(t.graph.data.reverse(),function(t){return t?t.name:void 0});u.enter().append("path").attr("class",function(t){return t.name+" lines"}).attr("d",function(t){return c(t.ratings)}),u.transition().attr("d",function(t){return c(t.ratings)}),u.exit().remove(),d.select_or_append("g.x").attr("class","x axis").attr("transform","translate(0,"+s+")").call(o).select_or_append("text.xaxis").attr("y",25).attr("x",450).style("text-anchor","end").style("dy",".71em").text("Week"),d.select_or_append("g.y").attr("class","y axis").call(l).select_or_append("text.yaxis").attr("transform","rotate(-90)").attr("y",-50).attr("x",-150).attr("dy",".71em").style("text-anchor","end").text("QB Rating (cumulative)");var p={};_.forEach(t.players,function(t){p[t.name]=JSON.parse(t.colors)});var g=d3.select("#controlBox").selectAll("div").data(t.graph.data,function(t){return t?t.name:void 0}).enter().append("div").attr("class","controller").style({border:"4px solid","border-color":function(t){return p[t.name].primary}});g.append("div").html(function(t){return t.name}),g.on("mouseover",function(){d3.select(this).style({"border-color":function(t){return p[t.name].secondary},"background-color":function(t){return p[t.name].primary}}).selectAll("div").style("color","whitesmoke")}),g.on("mouseout",function(t){t.selected||d3.select(this).style({"border-color":function(t){return p[t.name].primary},"background-color":"white"}).selectAll("div").style("color","black")}),g.on("click",function(){var e=d3.select(this).selectAll("div").html(),a=_.filter(t.graph.data,function(t){return t.name===e});_.forEach(a,function(t){t.selected=!t.selected}),g.each(function(t){t.name===e||t.selected?d3.select(this).style({"border-color":function(t){return p[t.name].secondary},"background-color":function(t){return p[t.name].primary}}).selectAll("div").style("color","whitesmoke"):d3.select(this).style({"border-color":function(t){return p[t.name].primary},"background-color":"white"}).selectAll("div").style("color","black")}),u.each(function(t){t.selected?d3.select(this).style({"stroke-width":"3px",stroke:function(t){return p[t.name].primary},"z-index":"10"}):d3.select(this).style({"stroke-width":"1px",stroke:"lightgrey","z-index":"0"})})}),console.log(t.players)}}]),angular.module("winston").config(["$stateProvider",function(t,e){t.state("home",{url:"/",templateUrl:"updateStats.html",controller:"newCTRL",resolve:{preloadObj:["$http",function(t){return t({method:"GET",url:"/api/stats"})}]}})}]).run(["$state",function(t){t.go("home")}]);
//# sourceMappingURL=data:application/json;base64,