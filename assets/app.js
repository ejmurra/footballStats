angular.module("winston",["ui.router"]),angular.module("winston").service("apiSVC",["$http",function(t){this.addNew=function(a){return t.post("/api/stats/add",a)},this.remove=function(){return t.get("/api/stats/remove")},this.load=function(){return t.get("/api/stats")}}]),angular.module("winston").controller("mainCTRL",["$scope","apiSVC","preloadObj",function(t,a,n){function s(a){_.forEach(t.players,function(n){function s(t){var a,n=[];_.forEach(t.games,function(s,e){if(3==t.id&&console.log(e,s),a||1!=s.g)if(a||s.g){if(null!=s.passing_comp&&(a.passing_comp+=s.passing_comp),null!=s.passing_yds&&(a.passing_yds+=s.passing_yds),null!=s.passing_td&&(a.passing_td+=s.passing_td),null!=s.passing_att&&(a.passing_att+=s.passing_att),null!=s.passing_int&&(a.passing_int+=s.passing_int),null!=a.passing_att&&0!=a.passing_att){var l=5*(a.passing_comp/a.passing_att-.3),i=.25*(a.passing_yds/a.passing_att-3),r=a.passing_td/a.passing_att*20,o=2.375-a.passing_int/a.passing_att*25;l>2.375&&(l=2.375),0>l&&(l=0),i>2.375&&(i=2.375),0>i&&(i=0),r>2.375&&(r=2.375),0>r&&(r=0),o>2.375&&(o=2.375),0>o&&(o=0);var u=(l+i+r+o)/6*100;n.push({week:e+1,rating:Math.round(100*(u+1e-5))/100,pid:t.id})}}else n.push({week:e+1,rating:null,pid:t.id});else if(a={passing_comp:0,passing_yds:0,passing_td:0,passing_att:0,passing_int:0},null!=s.passing_comp&&(a.passing_comp+=s.passing_comp),null!=s.passing_yds&&(a.passing_yds+=s.passing_yds),null!=s.passing_td&&(a.passing_td+=s.passing_td),null!=s.passing_att&&(a.passing_att+=s.passing_att),null!=s.passing_int&&(a.passing_int+=s.passing_int),null!=a.passing_att&&0!=a.passing_att){var l=5*(a.passing_comp/a.passing_att-.3),i=.25*(a.passing_yds/a.passing_att-3),r=a.passing_td/a.passing_att*20,o=2.375-a.passing_int/a.passing_att*25;l>2.375&&(l=2.375),0>l&&(l=0),i>2.375&&(i=2.375),0>i&&(i=0),r>2.375&&(r=2.375),0>r&&(r=0),o>2.375&&(o=2.375),0>o&&(o=0);var u=(l+i+r+o)/6*100;n.push({week:e+1,rating:Math.round(100*(u+1e-5))/100,pid:t.id})}});var s={};return _.forEach(n,function(t){s[t.week]=t}),3==t.id&&(console.log(s),console.log(n)),_.forEach(s,function(a,n){3==t.id&&console.log(a,n),a||(0!=n?(a=s[n-1],a.week++):(a.week=1,a.rating=null,a.pid=t.id))}),s}n.games=[],_.forEach(t.games,function(t){t.player==n.id&&n.games.push(t)}),_.sortBy(n.games,function(t){return t.week});var e=_.values(s(n));n.ratings=_.take(e,a),3==n.id&&(console.log(e),console.log(n.ratings))}),_.forEach(t.players,function(t){t.className="jameis",1!=t.id&&(t.className="other"),t.ratings.forEach(function(a,n){a?(a.week=+a.week,a.rating=a.rating,a.pid=t.id):0!=n&&null!=t.ratings[n]?t.ratings[n]={week:t.ratings[n].week+1,rating:t.ratings[n].rating,pid:t.id}:t.ratings[n]={week:n+1,rating:null,pid:t.id}})});var n={top:20,right:20,bottom:30,left:50},s=960-n.right-n.left,e=500-n.top-n.bottom,l=d3.scale.linear().range([0,s]),i=d3.scale.linear().range([e,0]),r=d3.svg.axis().scale(l).orient("bottom").tickValues(d3.range(1,a+1)).tickFormat(d3.format("d")),o=d3.svg.axis().scale(i).orient("left"),u=d3.svg.line().x(function(t){return l(t.week)}).y(function(t){return i(t.rating)}).interpolate("step-after"),c=d3.select("#graph").select_or_append("svg").attr("width",s+n.left+n.right).attr("height",e+n.top+n.bottom).select_or_append("g.container").attr("transform","translate("+n.left+","+n.top+")");l.domain([1,Number(a)]),i.domain([0,158.3]);var p=c.select_or_append("g.lines").selectAll("path").data(t.players.reverse(),function(t){return t?t.id:void 0});p.enter().append("path").attr("class",function(t){return t.className}).attr("name",function(t){return t.name}).attr("d",function(t){return u(t.ratings)}),p.attr("class",function(t){return t.className}).attr("name",function(t){return t.name}).transition().attr("d",function(t){return u(t.ratings)}),p.exit().remove(),c.select_or_append("g.x").attr("class","x axis").attr("transform","translate(0,"+e+")").call(r),c.select_or_append("g.y").attr("class","y axis").call(o).select_or_append("text.yaxis").attr("transform","rotate(-90)").attr("y",6).attr("dy",".71em").style("text-anchor","end").text("QB Rating (cumulative)")}t._showInput=!1;var e=function(){return[{key:"week",val:null},{key:"date",val:null},{key:"g",val:null},{key:"gs",val:null},{key:"pass_comp",val:null},{key:"pass_att",val:null},{key:"pass_pct",val:null},{key:"pass_yds",val:null},{key:"pass_avg",val:null},{key:"pass_td",val:null},{key:"pass_int",val:null},{key:"pass_sck",val:null},{key:"pass_scky",val:null},{key:"pass_rate",val:null},{key:"rush_att",val:null},{key:"rush_yds",val:null},{key:"rush_avg",val:null},{key:"rush_td",val:null},{key:"fum",val:null},{key:"fum_lost",val:null}]},l=function(){return[{key:"date",val:null},{key:"g",val:null},{key:"gs",val:null},{key:"pass_comp",val:null},{key:"pass_att",val:null},{key:"pass_pct",val:null},{key:"pass_yds",val:null},{key:"pass_avg",val:null},{key:"pass_td",val:null},{key:"pass_int",val:null},{key:"pass_sck",val:null},{key:"pass_scky",val:null},{key:"pass_rate",val:null},{key:"rush_att",val:null},{key:"rush_yds",val:null},{key:"rush_avg",val:null},{key:"rush_td",val:null},{key:"fum",val:null},{key:"fum_lost",val:null}]};"err"==n.data.status&&console.log(n.data.message),t.gameStats=n.data.data.winston,t.stats=new e,t.Ustats=new l,t.newStats=function(){a.addNew(t.Ustats).success(function(n){"success"==n.status?(t.Ustats=new l,t.toggleInput(),a.load().success(function(a){t.gameStats=a.data.winston})):"game_pk"==n.message.constraint?alert("Error: That game already exists in the database. Delete it first if you want to update it"):alert("Error: "+JSON.stringify(n.message.detail))})},t.toggleInput=function(){t._showInput=!t._showInput},t.deleteRow=function(){0!=t.gameStats&&a.remove().success(function(n){"success"==n.status&&a.load().success(function(a){t.gameStats=a.data.winston})})},t.maxGames=function(){var a=0;_.forEach(t.players,function(t){t.games.length>a&&(a=t.games.length)});for(var n=[],s=1;a+1>s;s++)n.push(s);return n},t.players=n.data.data.players,t.games=n.data.data.games,_.forEach(t.players,function(a){a.games=[],_.forEach(t.games,function(t){t.player===a.id&&a.games.push(t)})});var i=function(t,a){function n(t){if(null!=t.passing_att&&0!=t.passing_att){var a=5*(e.passing_comp/e.passing_att-.3),n=.25*(e.passing_yds/e.passing_att-3),s=e.passing_td/e.passing_att*20,l=2.375-e.passing_int/e.passing_att*25;return a>2.375&&(a=2.375),0>a&&(a=0),n>2.375&&(n=2.375),0>n&&(n=0),s>2.375&&(s=2.375),0>s&&(s=0),l>2.375&&(l=2.375),0>l&&(l=0),(a+n+s+l)/6*100}}var s=_.take(t.games,a),e={passing_comp:0,passing_yds:0,passing_td:0,passing_att:0,passing_int:0};return _.forEach(s,function(t){null!=t.passing_comp&&(e.passing_comp+=t.passing_comp),null!=t.passing_yds&&(e.passing_yds+=t.passing_yds),null!=t.passing_td&&(e.passing_td+=t.passing_td),null!=t.passing_att&&(e.passing_att+=t.passing_att),null!=t.passing_int&&(e.passing_int+=t.passing_int)}),t.rating=n(e),t};t.ratePlayers=function(){t.chartActive=!0;var n=$("#week2rate").val().split(" ")[1],e=[];t.rated=[],a.load().success(function(a){t.players=a.data.players,t.games=a.data.games,t.gameStates=a.data.winston,_.forEach(t.players,function(a){a.games=[],_.forEach(t.games,function(t){t.player===a.id&&a.games.push(t)}),_.sortBy(a.games,function(t){return t.week})}),_.forEach(t.players,function(t){i(t,n),e.push({player:t.name,rating:Math.round(100*(t.rating+1e-5))/100,id:"p"+t.id})});var l=_.sortBy(e,function(t){return t.rating});l=_.filter(l,function(t){return t.rating}),_.forEach(l.reverse(),function(a,n){a.rank=n+1,t.rated.push(a)}),s(n)})},t.chartActive=!1,t.dl=function(){function t(){var t=[window.document],n=[];iframes=document.querySelectorAll("iframe"),objects=document.querySelectorAll("object");var l=window.document.createElementNS(o.svg,"svg");window.document.body.appendChild(l);var i=getComputedStyle(l);[].forEach.call(iframes,function(a){try{a.contentDocument&&t.push(a.contentDocument)}catch(n){console.log(n)}}),[].forEach.call(objects,function(a){try{a.contentDocument&&t.push(a.contentDocument)}catch(n){console.log(n)}}),t.forEach(function(t){for(var a=s(t,i),e=0;e<a.length;e++)n.push(a[e])}),n.length>1?a(n):n.length>0?e(n[0]):alert("The Crowbar couldnâ€™t find any SVG nodes.")}function a(t){n(),t.forEach(function(a){t.forEach(function(t){a!==t&&Math.abs(a.top-t.top)<38&&Math.abs(a.left-t.left)<38&&(t.top+=38,t.left+=38)})});var a=document.createElement("div");r.appendChild(a),a.setAttribute("class","svg-crowbar"),a.style["z-index"]=1e7,a.style.position="absolute",a.style.top=0,a.style.left=0;var s=document.createElement("div");r.appendChild(s),s.setAttribute("class","svg-crowbar"),s.style.background="rgba(255, 255, 255, 0.7)",s.style.position="fixed",s.style.left=0,s.style.top=0,s.style.width="100%",s.style.height="100%",t.forEach(function(t,n){var s=document.createElement("div");a.appendChild(s),s.setAttribute("class","svg-crowbar"),s.style.position="absolute",s.style.top=t.top+document.body.scrollTop+"px",s.style.left=document.body.scrollLeft+t.left+"px",s.style.padding="4px",s.style["border-radius"]="3px",s.style.color="white",s.style["text-align"]="center",s.style["font-family"]="'Helvetica Neue'",s.style.background="rgba(0, 0, 0, 0.8)",s.style["box-shadow"]="0px 4px 18px rgba(0, 0, 0, 0.4)",s.style.cursor="move",s.textContent="SVG #"+n+": "+(t.id?"#"+t.id:"")+(t["class"]?"."+t["class"]:"");var l=document.createElement("button");s.appendChild(l),l.setAttribute("data-source-id",n),l.style.width="150px",l.style["font-size"]="12px",l.style["line-height"]="1.4em",l.style.margin="5px 0 0 0",l.textContent="Download",l.onclick=function(a){e(t)}})}function n(){var t=document.querySelectorAll(".svg-crowbar");[].forEach.call(t,function(t){t.parentNode.removeChild(t)})}function s(t,a){var n=[],s=t.querySelectorAll("svg");return[].forEach.call(s,function(t){t.setAttribute("version","1.1"),t.removeAttribute("xmlns"),t.removeAttribute("xlink"),t.hasAttributeNS(o.xmlns,"xmlns")||t.setAttributeNS(o.xmlns,"xmlns",o.svg),t.hasAttributeNS(o.xmlns,"xmlns:xlink")||t.setAttributeNS(o.xmlns,"xmlns:xlink",o.xlink),l(t,a);var s=(new XMLSerializer).serializeToString(t),e=t.getBoundingClientRect();n.push({top:e.top,left:e.left,width:e.width,height:e.height,"class":t.getAttribute("class"),id:t.getAttribute("id"),childElementCount:t.childElementCount,source:[i+s]})}),n}function e(t){var a="untitled";t.id?a=t.id:t["class"]?a=t["class"]:window.document.title&&(a=window.document.title.replace(/[^a-z0-9]/gi,"-").toLowerCase());var n=window.URL.createObjectURL(new Blob(t.source,{type:"text/xml"})),s=document.createElement("a");r.appendChild(s),s.setAttribute("class","svg-crowbar"),s.setAttribute("download",a+".svg"),s.setAttribute("href",n),s.style.display="none",s.click(),setTimeout(function(){window.URL.revokeObjectURL(n)},10)}function l(t,a){function n(t){var n,s,e,l,i=getComputedStyle(t),r="";for(n=0,s=i.length;s>n;n++)e=i[n],l=i.getPropertyValue(e),l!==a.getPropertyValue(e)&&(r+=e+":"+l+";");t.setAttribute("style",r)}function s(t){function a(t){if(t&&t.hasChildNodes())for(var s=t.firstChild;s;)1===s.nodeType&&"SCRIPT"!=s.nodeName&&(n.push(s),a(s)),s=s.nextSibling}var n=[];return n.push(t),a(t),n}for(var e=s(t),l=e.length;l--;)n(e[l])}var i='<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">';window.URL=window.URL||window.webkitURL;var r=document.body,o={xmlns:"http://www.w3.org/2000/xmlns/",xlink:"http://www.w3.org/1999/xlink",svg:"http://www.w3.org/2000/svg"};t()}}]),angular.module("winston").config(["$stateProvider",function(t,a){t.state("home",{url:"/",templateUrl:"updateStats.html",controller:"mainCTRL",resolve:{preloadObj:["$http",function(t){return t({method:"GET",url:"/api/stats"})}]}})}]).run(["$state",function(t){t.go("home")}]);
//# sourceMappingURL=data:application/json;base64,