angular.module("winston",["ui.router"]),angular.module("winston").service("apiSVC",["$http",function(a){this.addNew=function(s){return a.post("/api/stats/add",s)},this.remove=function(){return a.get("/api/stats/remove")},this.load=function(){return a.get("/api/stats")}}]),angular.module("winston").controller("mainCTRL",["$scope","apiSVC","preloadObj",function(a,s,t){function n(s){_.forEach(a.players,function(t){function n(a){var s,t=[];_.forEach(a.games,function(n,e){if(3==a.id&&console.log(e,n),s||1!=n.g)if(s||n.g){if(null!=n.passing_comp&&(s.passing_comp+=n.passing_comp),null!=n.passing_yds&&(s.passing_yds+=n.passing_yds),null!=n.passing_td&&(s.passing_td+=n.passing_td),null!=n.passing_att&&(s.passing_att+=n.passing_att),null!=n.passing_int&&(s.passing_int+=n.passing_int),null!=s.passing_att&&0!=s.passing_att){var l=5*(s.passing_comp/s.passing_att-.3),i=.25*(s.passing_yds/s.passing_att-3),r=s.passing_td/s.passing_att*20,p=2.375-s.passing_int/s.passing_att*25;l>2.375&&(l=2.375),0>l&&(l=0),i>2.375&&(i=2.375),0>i&&(i=0),r>2.375&&(r=2.375),0>r&&(r=0),p>2.375&&(p=2.375),0>p&&(p=0);var u=(l+i+r+p)/6*100;t.push({week:e+1,rating:Math.round(100*(u+1e-5))/100,pid:a.id})}}else t.push({week:e+1,rating:null,pid:a.id});else if(s={passing_comp:0,passing_yds:0,passing_td:0,passing_att:0,passing_int:0},null!=n.passing_comp&&(s.passing_comp+=n.passing_comp),null!=n.passing_yds&&(s.passing_yds+=n.passing_yds),null!=n.passing_td&&(s.passing_td+=n.passing_td),null!=n.passing_att&&(s.passing_att+=n.passing_att),null!=n.passing_int&&(s.passing_int+=n.passing_int),null!=s.passing_att&&0!=s.passing_att){var l=5*(s.passing_comp/s.passing_att-.3),i=.25*(s.passing_yds/s.passing_att-3),r=s.passing_td/s.passing_att*20,p=2.375-s.passing_int/s.passing_att*25;l>2.375&&(l=2.375),0>l&&(l=0),i>2.375&&(i=2.375),0>i&&(i=0),r>2.375&&(r=2.375),0>r&&(r=0),p>2.375&&(p=2.375),0>p&&(p=0);var u=(l+i+r+p)/6*100;t.push({week:e+1,rating:Math.round(100*(u+1e-5))/100,pid:a.id})}});var n={};return _.forEach(t,function(a){n[a.week]=a}),3==a.id&&(console.log(n),console.log(t)),_.forEach(n,function(s,t){3==a.id&&console.log(s,t),s||(0!=t?(s=n[t-1],s.week++):(s.week=1,s.rating=null,s.pid=a.id))}),n}t.games=[],_.forEach(a.games,function(a){a.player==t.id&&t.games.push(a)}),_.sortBy(t.games,function(a){return a.week});var e=_.values(n(t));t.ratings=_.take(e,s),3==t.id&&(console.log(e),console.log(t.ratings))}),_.forEach(a.players,function(a){a.className="jameis",1!=a.id&&(a.className="other"),a.ratings.forEach(function(s,t){s?(s.week=+s.week,s.rating=s.rating,s.pid=a.id):0!=t&&null!=a.ratings[t]?a.ratings[t]={week:a.ratings[t].week+1,rating:a.ratings[t].rating,pid:a.id}:a.ratings[t]={week:t+1,rating:null,pid:a.id}})});var t={top:20,right:20,bottom:30,left:50},n=960-t.right-t.left,e=500-t.top-t.bottom,l=d3.scale.linear().range([0,n]),i=d3.scale.linear().range([e,0]),r=d3.svg.axis().scale(l).orient("bottom").tickValues(d3.range(1,s+1)).tickFormat(d3.format("d")),p=d3.svg.axis().scale(i).orient("left"),u=d3.svg.line().x(function(a){return l(a.week)}).y(function(a){return i(a.rating)}).interpolate("step-after"),o=d3.select("#graph").select_or_append("svg").attr("width",n+t.left+t.right).attr("height",e+t.top+t.bottom).select_or_append("g.container").attr("transform","translate("+t.left+","+t.top+")");l.domain([1,Number(s)]),i.domain([0,158.3]);var g=o.select_or_append("g.lines").selectAll("path").data(a.players.reverse(),function(a){return a?a.id:void 0});g.enter().append("path").attr("class",function(a){return a.className}).attr("name",function(a){return a.name}).attr("d",function(a){return u(a.ratings)}),g.attr("class",function(a){return a.className}).attr("name",function(a){return a.name}).transition().attr("d",function(a){return u(a.ratings)}),g.exit().remove(),o.select_or_append("g.x").attr("class","x axis").attr("transform","translate(0,"+e+")").call(r),o.select_or_append("g.y").attr("class","y axis").call(p).select_or_append("text.yaxis").attr("transform","rotate(-90)").attr("y",6).attr("dy",".71em").style("text-anchor","end").text("QB Rating (cumulative)")}a._showInput=!1;var e=function(){return[{key:"week",val:null},{key:"date",val:null},{key:"g",val:null},{key:"gs",val:null},{key:"pass_comp",val:null},{key:"pass_att",val:null},{key:"pass_pct",val:null},{key:"pass_yds",val:null},{key:"pass_avg",val:null},{key:"pass_td",val:null},{key:"pass_int",val:null},{key:"pass_sck",val:null},{key:"pass_scky",val:null},{key:"pass_rate",val:null},{key:"rush_att",val:null},{key:"rush_yds",val:null},{key:"rush_avg",val:null},{key:"rush_td",val:null},{key:"fum",val:null},{key:"fum_lost",val:null}]},l=function(){return[{key:"date",val:null},{key:"g",val:null},{key:"gs",val:null},{key:"pass_comp",val:null},{key:"pass_att",val:null},{key:"pass_pct",val:null},{key:"pass_yds",val:null},{key:"pass_avg",val:null},{key:"pass_td",val:null},{key:"pass_int",val:null},{key:"pass_sck",val:null},{key:"pass_scky",val:null},{key:"pass_rate",val:null},{key:"rush_att",val:null},{key:"rush_yds",val:null},{key:"rush_avg",val:null},{key:"rush_td",val:null},{key:"fum",val:null},{key:"fum_lost",val:null}]};"err"==t.data.status&&console.log(t.data.message),a.gameStats=t.data.data.winston,a.stats=new e,a.Ustats=new l,a.newStats=function(){s.addNew(a.Ustats).success(function(t){"success"==t.status?(a.Ustats=new l,a.toggleInput(),s.load().success(function(s){a.gameStats=s.data.winston})):"game_pk"==t.message.constraint?alert("Error: That game already exists in the database. Delete it first if you want to update it"):alert("Error: "+JSON.stringify(t.message.detail))})},a.toggleInput=function(){a._showInput=!a._showInput},a.deleteRow=function(){0!=a.gameStats&&s.remove().success(function(t){"success"==t.status&&s.load().success(function(s){a.gameStats=s.data.winston})})},a.maxGames=function(){var s=0;_.forEach(a.players,function(a){a.games.length>s&&(s=a.games.length)});for(var t=[],n=1;s+1>n;n++)t.push(n);return t},a.players=t.data.data.players,a.games=t.data.data.games,_.forEach(a.players,function(s){s.games=[],_.forEach(a.games,function(a){a.player===s.id&&s.games.push(a)})});var i=function(a,s){function t(a){if(null!=a.passing_att&&0!=a.passing_att){var s=5*(e.passing_comp/e.passing_att-.3),t=.25*(e.passing_yds/e.passing_att-3),n=e.passing_td/e.passing_att*20,l=2.375-e.passing_int/e.passing_att*25;return s>2.375&&(s=2.375),0>s&&(s=0),t>2.375&&(t=2.375),0>t&&(t=0),n>2.375&&(n=2.375),0>n&&(n=0),l>2.375&&(l=2.375),0>l&&(l=0),(s+t+n+l)/6*100}}var n=_.take(a.games,s),e={passing_comp:0,passing_yds:0,passing_td:0,passing_att:0,passing_int:0};return _.forEach(n,function(a){null!=a.passing_comp&&(e.passing_comp+=a.passing_comp),null!=a.passing_yds&&(e.passing_yds+=a.passing_yds),null!=a.passing_td&&(e.passing_td+=a.passing_td),null!=a.passing_att&&(e.passing_att+=a.passing_att),null!=a.passing_int&&(e.passing_int+=a.passing_int)}),a.rating=t(e),a};a.ratePlayers=function(){var t=$("#week2rate").val().split(" ")[1],e=[];a.rated=[],s.load().success(function(s){a.players=s.data.players,a.games=s.data.games,a.gameStates=s.data.winston,_.forEach(a.players,function(s){s.games=[],_.forEach(a.games,function(a){a.player===s.id&&s.games.push(a)}),_.sortBy(s.games,function(a){return a.week})}),_.forEach(a.players,function(a){i(a,t),e.push({player:a.name,rating:Math.round(100*(a.rating+1e-5))/100,id:"p"+a.id})});var l=_.sortBy(e,function(a){return a.rating});l=_.filter(l,function(a){return a.rating}),_.forEach(l.reverse(),function(s,t){s.rank=t+1,a.rated.push(s)}),n(t)})}}]),angular.module("winston").config(["$stateProvider",function(a,s){a.state("home",{url:"/",templateUrl:"updateStats.html",controller:"mainCTRL",resolve:{preloadObj:["$http",function(a){return a({method:"GET",url:"/api/stats"})}]}})}]).run(["$state",function(a){a.go("home")}]);
//# sourceMappingURL=data:application/json;base64,